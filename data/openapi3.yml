openapi: 3.0.0
info:
  description: This documentation describes the Gitea API.
  title: Gitea API.
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  version: "{{AppVer | JSEscape | Safe}}"
paths:
  /admin/cron:
    get:
      tags:
        - admin
      summary: List cron tasks
      operationId: adminCronList
      parameters:
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/CronList"
        "403":
          $ref: "#/components/responses/forbidden"
  "/admin/cron/{task}":
    post:
      tags:
        - admin
      summary: Run cron task
      operationId: adminCronRun
      parameters:
        - description: task to run
          name: task
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
  /admin/orgs:
    get:
      tags:
        - admin
      summary: List all organizations
      operationId: adminGetAllOrgs
      parameters:
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/OrganizationList"
        "403":
          $ref: "#/components/responses/forbidden"
  /admin/unadopted:
    get:
      tags:
        - admin
      summary: List unadopted repositories
      operationId: adminUnadoptedList
      parameters:
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
        - description: pattern of repositories to search for
          name: pattern
          in: query
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/StringSlice"
        "403":
          $ref: "#/components/responses/forbidden"
  "/admin/unadopted/{owner}/{repo}":
    post:
      tags:
        - admin
      summary: Adopt unadopted files as a repository
      operationId: adminAdoptRepository
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      tags:
        - admin
      summary: Delete unadopted files
      operationId: adminDeleteUnadoptedRepository
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
  /admin/users:
    get:
      tags:
        - admin
      summary: List all users
      operationId: adminGetAllUsers
      parameters:
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/UserList"
        "403":
          $ref: "#/components/responses/forbidden"
    post:
      tags:
        - admin
      summary: Create a user
      operationId: adminCreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserOption"
      responses:
        "201":
          $ref: "#/components/responses/User"
        "400":
          $ref: "#/components/responses/error"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
  "/admin/users/{username}":
    delete:
      tags:
        - admin
      summary: Delete a user
      operationId: adminDeleteUser
      parameters:
        - description: username of user to delete
          name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
    patch:
      tags:
        - admin
      summary: Edit an existing user
      operationId: adminEditUser
      parameters:
        - description: username of user to edit
          name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditUserOption"
      responses:
        "200":
          $ref: "#/components/responses/User"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
  "/admin/users/{username}/keys":
    post:
      tags:
        - admin
      summary: Add a public key on behalf of a user
      operationId: adminCreatePublicKey
      parameters:
        - description: username of the user
          name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CreateKeyOption"
      responses:
        "201":
          $ref: "#/components/responses/PublicKey"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
  "/admin/users/{username}/keys/{id}":
    delete:
      tags:
        - admin
      summary: Delete a user's public key
      operationId: adminDeleteUserPublicKey
      parameters:
        - description: username of user
          name: username
          in: path
          required: true
          schema:
            type: string
        - description: id of the key to delete
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
  "/admin/users/{username}/orgs":
    post:
      tags:
        - admin
      summary: Create an organization
      operationId: adminCreateOrg
      parameters:
        - description: username of the user that will own the created organization
          name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CreateOrgOption"
      responses:
        "201":
          $ref: "#/components/responses/Organization"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
  "/admin/users/{username}/repos":
    post:
      tags:
        - admin
      summary: Create a repository on behalf of a user
      operationId: adminCreateRepo
      parameters:
        - description: username of the user. This user will own the created repository
          name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRepoOption"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/Repository"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/error"
        "422":
          $ref: "#/components/responses/validationError"
  /markdown:
    post:
      tags:
        - miscellaneous
      summary: Render a markdown document as HTML
      operationId: renderMarkdown
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MarkdownOption"
      responses:
        "200":
          $ref: "#/components/responses/MarkdownRender"
        "422":
          $ref: "#/components/responses/validationError"
  /markdown/raw:
    post:
      tags:
        - miscellaneous
      summary: Render raw markdown as HTML
      operationId: renderMarkdownRaw
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: Request body to render
        required: true
      responses:
        "200":
          $ref: "#/components/responses/MarkdownRender"
        "422":
          $ref: "#/components/responses/validationError"
  /notifications:
    get:
      tags:
        - notification
      summary: List users's notification threads
      operationId: notifyGetList
      parameters:
        - description: If true, show notifications marked as read. Default value is false
          name: all
          in: query
          schema:
            type: boolean
        - description: "Show notifications with the provided status types. Options are:
            unread, read and/or pinned. Defaults to unread & pinned."
          name: status-types
          in: query
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: filter notifications by subject type
          name: subject-type
          in: query
          explode: true
          schema:
            type: array
            items:
              enum:
                - issue
                - pull
                - commit
                - repository
              type: string
        - description: Only show notifications updated after the given time. This is a
            timestamp in RFC 3339 format
          name: since
          in: query
          schema:
            type: string
            format: date-time
        - description: Only show notifications updated before the given time. This is a
            timestamp in RFC 3339 format
          name: before
          in: query
          schema:
            type: string
            format: date-time
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/NotificationThreadList"
    put:
      tags:
        - notification
      summary: Mark notification threads as read, pinned or unread
      operationId: notifyReadList
      parameters:
        - description: Describes the last point that notifications were checked. Anything
            updated since this time will not be updated.
          name: last_read_at
          in: query
          schema:
            type: string
            format: date-time
        - description: If true, mark all notifications on this repo. Default value is false
          name: all
          in: query
          schema:
            type: string
        - description: "Mark notifications with the provided status types. Options are:
            unread, read and/or pinned. Defaults to unread."
          name: status-types
          in: query
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: Status to mark notifications as, Defaults to read.
          name: to-status
          in: query
          schema:
            type: string
      responses:
        "205":
          $ref: "#/components/responses/empty"
  /notifications/new:
    get:
      tags:
        - notification
      summary: Check if unread notifications exist
      operationId: notifyNewAvailable
      responses:
        "200":
          $ref: "#/components/responses/NotificationCount"
  "/notifications/threads/{id}":
    get:
      tags:
        - notification
      summary: Get notification thread by ID
      operationId: notifyGetThread
      parameters:
        - description: id of notification thread
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/NotificationThread"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      tags:
        - notification
      summary: Mark notification thread as read by ID
      operationId: notifyReadThread
      parameters:
        - description: id of notification thread
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: Status to mark notifications as
          name: to-status
          in: query
          schema:
            type: string
            default: read
      responses:
        "205":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
  "/org/{org}/repos":
    post:
      tags:
        - organization
      summary: Create a repository in an organization
      operationId: createOrgRepoDeprecated
      deprecated: true
      parameters:
        - description: name of organization
          name: org
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CreateRepoOption"
      responses:
        "201":
          $ref: "#/components/responses/Repository"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
  /orgs:
    get:
      tags:
        - organization
      summary: Get list of organizations
      operationId: orgGetAll
      parameters:
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/OrganizationList"
    post:
      tags:
        - organization
      summary: Create an organization
      operationId: orgCreate
      requestBody:
        $ref: "#/components/requestBodies/CreateOrgOption"
      responses:
        "201":
          $ref: "#/components/responses/Organization"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
  "/orgs/{org}":
    get:
      tags:
        - organization
      summary: Get an organization
      operationId: orgGet
      parameters:
        - description: name of the organization to get
          name: org
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Organization"
    delete:
      tags:
        - organization
      summary: Delete an organization
      operationId: orgDelete
      parameters:
        - description: organization that is to be deleted
          name: org
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
    patch:
      tags:
        - organization
      summary: Edit an organization
      operationId: orgEdit
      parameters:
        - description: name of the organization to edit
          name: org
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditOrgOption"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/Organization"
  "/orgs/{org}/hooks":
    get:
      tags:
        - organization
      summary: List an organization's webhooks
      operationId: orgListHooks
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/HookList"
  "/orgs/{org}/hooks/":
    post:
      tags:
        - organization
      summary: Create a hook
      operationId: orgCreateHook
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateHookOption"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/Hook"
  "/orgs/{org}/hooks/{id}":
    get:
      tags:
        - organization
      summary: Get a hook
      operationId: orgGetHook
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: id of the hook to get
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Hook"
    delete:
      tags:
        - organization
      summary: Delete a hook
      operationId: orgDeleteHook
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: id of the hook to delete
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
    patch:
      tags:
        - organization
      summary: Update a hook
      operationId: orgEditHook
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: id of the hook to update
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditHookOption"
      responses:
        "200":
          $ref: "#/components/responses/Hook"
  "/orgs/{org}/labels":
    get:
      tags:
        - organization
      summary: List an organization's labels
      operationId: orgListLabels
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/LabelList"
    post:
      tags:
        - organization
      summary: Create a label for an organization
      operationId: orgCreateLabel
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CreateLabelOption"
      responses:
        "201":
          $ref: "#/components/responses/Label"
        "422":
          $ref: "#/components/responses/validationError"
  "/orgs/{org}/labels/{id}":
    get:
      tags:
        - organization
      summary: Get a single label
      operationId: orgGetLabel
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: id of the label to get
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Label"
    delete:
      tags:
        - organization
      summary: Delete a label
      operationId: orgDeleteLabel
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: id of the label to delete
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
    patch:
      tags:
        - organization
      summary: Update a label
      operationId: orgEditLabel
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: id of the label to edit
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EditLabelOption"
      responses:
        "200":
          $ref: "#/components/responses/Label"
        "422":
          $ref: "#/components/responses/validationError"
  "/orgs/{org}/members":
    get:
      tags:
        - organization
      summary: List an organization's members
      operationId: orgListMembers
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/UserList"
  "/orgs/{org}/members/{username}":
    get:
      tags:
        - organization
      summary: Check if a user is a member of an organization
      operationId: orgIsMember
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: username of the user
          name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: user is a member
        "302":
          description: redirection to /orgs/{org}/public_members/{username}
        "404":
          description: user is not a member
    delete:
      tags:
        - organization
      summary: Remove a member from an organization
      operationId: orgDeleteMember
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: username of the user
          name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: member removed
  "/orgs/{org}/public_members":
    get:
      tags:
        - organization
      summary: List an organization's public members
      operationId: orgListPublicMembers
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/UserList"
  "/orgs/{org}/public_members/{username}":
    get:
      tags:
        - organization
      summary: Check if a user is a public member of an organization
      operationId: orgIsPublicMember
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: username of the user
          name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: user is a public member
        "404":
          description: user is not a public member
    put:
      tags:
        - organization
      summary: Publicize a user's membership
      operationId: orgPublicizeMember
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: username of the user
          name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: membership publicized
        "403":
          $ref: "#/components/responses/forbidden"
    delete:
      tags:
        - organization
      summary: Conceal a user's membership
      operationId: orgConcealMember
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: username of the user
          name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
  "/orgs/{org}/repos":
    get:
      tags:
        - organization
      summary: List an organization's repos
      operationId: orgListRepos
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
    post:
      tags:
        - organization
      summary: Create a repository in an organization
      operationId: createOrgRepo
      parameters:
        - description: name of organization
          name: org
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CreateRepoOption"
      responses:
        "201":
          $ref: "#/components/responses/Repository"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
  "/orgs/{org}/teams":
    get:
      tags:
        - organization
      summary: List an organization's teams
      operationId: orgListTeams
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/TeamList"
    post:
      tags:
        - organization
      summary: Create a team
      operationId: orgCreateTeam
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeamOption"
      responses:
        "201":
          $ref: "#/components/responses/Team"
        "422":
          $ref: "#/components/responses/validationError"
  "/orgs/{org}/teams/search":
    get:
      tags:
        - organization
      summary: Search for teams within an organization
      operationId: teamSearch
      parameters:
        - description: name of the organization
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: keywords to search
          name: q
          in: query
          schema:
            type: string
        - description: include search within team description (defaults to true)
          name: include_desc
          in: query
          schema:
            type: boolean
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          description: SearchResults of a successful search
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"
                  ok:
                    type: boolean
  /repos/issues/search:
    get:
      tags:
        - issue
      summary: Search for issues across the repositories that the user has access to
      operationId: issueSearchIssues
      parameters:
        - description: whether issue is open or closed
          name: state
          in: query
          schema:
            type: string
        - description: comma separated list of labels. Fetch only issues that have any of
            this labels. Non existent labels are discarded
          name: labels
          in: query
          schema:
            type: string
        - description: comma separated list of milestone names. Fetch only issues that have
            any of this milestones. Non existent are discarded
          name: milestones
          in: query
          schema:
            type: string
        - description: search string
          name: q
          in: query
          schema:
            type: string
        - description: repository to prioritize in the results
          name: priority_repo_id
          in: query
          schema:
            type: integer
            format: int64
        - description: filter by type (issues / pulls) if set
          name: type
          in: query
          schema:
            type: string
        - description: Only show notifications updated after the given time. This is a
            timestamp in RFC 3339 format
          name: since
          in: query
          schema:
            type: string
            format: date-time
        - description: Only show notifications updated before the given time. This is a
            timestamp in RFC 3339 format
          name: before
          in: query
          schema:
            type: string
            format: date-time
        - description: filter (issues / pulls) assigned to you, default is false
          name: assigned
          in: query
          schema:
            type: boolean
        - description: filter (issues / pulls) created by you, default is false
          name: created
          in: query
          schema:
            type: boolean
        - description: filter (issues / pulls) mentioning you, default is false
          name: mentioned
          in: query
          schema:
            type: boolean
        - description: filter pulls requesting your review, default is false
          name: review_requested
          in: query
          schema:
            type: boolean
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/IssueList"
  /repos/migrate:
    post:
      tags:
        - repository
      summary: Migrate a remote git repository
      operationId: repoMigrate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MigrateRepoOptions"
      responses:
        "201":
          $ref: "#/components/responses/Repository"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
  /repos/search:
    get:
      tags:
        - repository
      summary: Search for repositories
      operationId: repoSearch
      parameters:
        - description: keyword
          name: q
          in: query
          schema:
            type: string
        - description: Limit search to repositories with keyword as topic
          name: topic
          in: query
          schema:
            type: boolean
        - description: include search of keyword within repository description
          name: includeDesc
          in: query
          schema:
            type: boolean
        - description: search only for repos that the user with the given id owns or
            contributes to
          name: uid
          in: query
          schema:
            type: integer
            format: int64
        - description: repo owner to prioritize in the results
          name: priority_owner_id
          in: query
          schema:
            type: integer
            format: int64
        - description: search only for repos that belong to the given team id
          name: team_id
          in: query
          schema:
            type: integer
            format: int64
        - description: search only for repos that the user with the given id has starred
          name: starredBy
          in: query
          schema:
            type: integer
            format: int64
        - description: include private repositories this user has access to (defaults to
            true)
          name: private
          in: query
          schema:
            type: boolean
        - description: show only pubic, private or all repositories (defaults to all)
          name: is_private
          in: query
          schema:
            type: boolean
        - description: include template repositories this user has access to (defaults to
            true)
          name: template
          in: query
          schema:
            type: boolean
        - description: show only archived, non-archived or all repositories (defaults to
            all)
          name: archived
          in: query
          schema:
            type: boolean
        - description: type of repository to search for. Supported values are "fork",
            "source", "mirror" and "collaborative"
          name: mode
          in: query
          schema:
            type: string
        - description: if `uid` is given, search only for repos that the user owns
          name: exclusive
          in: query
          schema:
            type: boolean
        - description: sort repos by attribute. Supported values are "alpha", "created",
            "updated", "size", and "id". Default is "alpha"
          name: sort
          in: query
          schema:
            type: string
        - description: sort order, either "asc" (ascending) or "desc" (descending). Default
            is "asc", ignored if "sort" is not specified.
          name: order
          in: query
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/SearchResults"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}":
    get:
      tags:
        - repository
      summary: Get a repository
      operationId: repoGet
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Repository"
    delete:
      tags:
        - repository
      summary: Delete a repository
      operationId: repoDelete
      parameters:
        - description: owner of the repo to delete
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo to delete
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
    patch:
      tags:
        - repository
      summary: Edit a repository's properties. Only fields that are set will be changed.
      operationId: repoEdit
      parameters:
        - description: owner of the repo to edit
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo to edit
          name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditRepoOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/EditRepoOption"
        description: Properties of a repo that you can edit
      responses:
        "200":
          $ref: "#/components/responses/Repository"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/archive/{archive}":
    get:
      tags:
        - repository
      summary: Get an archive of a repository
      operationId: repoGetArchive
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: the git reference for download with attached archive format (e.g.
            master.zip)
          name: archive
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/assignees":
    get:
      tags:
        - repository
      summary: Return all users that have write access and can be assigned to issues
      operationId: repoGetAssignees
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/UserList"
  "/repos/{owner}/{repo}/branch_protections":
    get:
      tags:
        - repository
      summary: List branch protections for a repository
      operationId: repoListBranchProtection
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/BranchProtectionList"
    post:
      tags:
        - repository
      summary: Create a branch protections for a repository
      operationId: repoCreateBranchProtection
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBranchProtectionOption"
      responses:
        "201":
          $ref: "#/components/responses/BranchProtection"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/branch_protections/{name}":
    get:
      tags:
        - repository
      summary: Get a specific branch protection for the repository
      operationId: repoGetBranchProtection
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: name of protected branch
          name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/BranchProtection"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      tags:
        - repository
      summary: Delete a specific branch protection for the repository
      operationId: repoDeleteBranchProtection
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: name of protected branch
          name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      tags:
        - repository
      summary: Edit a branch protections for a repository. Only fields that are set
        will be changed
      operationId: repoEditBranchProtection
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: name of protected branch
          name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditBranchProtectionOption"
      responses:
        "200":
          $ref: "#/components/responses/BranchProtection"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/branches":
    get:
      tags:
        - repository
      summary: List a repository's branches
      operationId: repoListBranches
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/BranchList"
    post:
      tags:
        - repository
      summary: Create a branch
      operationId: repoCreateBranch
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBranchRepoOption"
      responses:
        "201":
          $ref: "#/components/responses/Branch"
        "404":
          description: The old branch does not exist.
        "409":
          description: The branch with the same name already exists.
  "/repos/{owner}/{repo}/branches/{branch}":
    get:
      tags:
        - repository
      summary: Retrieve a specific branch from a repository, including its effective
        branch protection
      operationId: repoGetBranch
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: branch to get
          name: branch
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Branch"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      tags:
        - repository
      summary: Delete a specific branch from a repository
      operationId: repoDeleteBranch
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: branch to delete
          name: branch
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/error"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/collaborators":
    get:
      tags:
        - repository
      summary: List a repository's collaborators
      operationId: repoListCollaborators
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/UserList"
  "/repos/{owner}/{repo}/collaborators/{collaborator}":
    get:
      tags:
        - repository
      summary: Check if a user is a collaborator of a repository
      operationId: repoCheckCollaborator
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: username of the collaborator
          name: collaborator
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/validationError"
    put:
      tags:
        - repository
      summary: Add a collaborator to a repository
      operationId: repoAddCollaborator
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: username of the collaborator to add
          name: collaborator
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddCollaboratorOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/AddCollaboratorOption"
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "422":
          $ref: "#/components/responses/validationError"
    delete:
      tags:
        - repository
      summary: Delete a collaborator from a repository
      operationId: repoDeleteCollaborator
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: username of the collaborator to delete
          name: collaborator
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/commits":
    get:
      tags:
        - repository
      summary: Get a list of all commits from a repository
      operationId: repoGetAllCommits
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: SHA or branch to start listing commits from (usually 'master')
          name: sha
          in: query
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/CommitList"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/EmptyRepository"
  "/repos/{owner}/{repo}/commits/{ref}/status":
    get:
      tags:
        - repository
      summary: Get a commit's combined status, by branch/tag/commit reference
      operationId: repoGetCombinedStatusByRef
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: name of branch/tag/commit
          name: ref
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/CombinedStatus"
        "400":
          $ref: "#/components/responses/error"
  "/repos/{owner}/{repo}/commits/{ref}/statuses":
    get:
      tags:
        - repository
      summary: Get a commit's statuses, by branch/tag/commit reference
      operationId: repoListStatusesByRef
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: name of branch/tag/commit
          name: ref
          in: path
          required: true
          schema:
            type: string
        - description: type of sort
          name: sort
          in: query
          schema:
            type: string
            enum:
              - oldest
              - recentupdate
              - leastupdate
              - leastindex
              - highestindex
        - description: type of state
          name: state
          in: query
          schema:
            type: string
            enum:
              - pending
              - success
              - error
              - failure
              - warning
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/CommitStatusList"
        "400":
          $ref: "#/components/responses/error"
  "/repos/{owner}/{repo}/contents":
    get:
      tags:
        - repository
      summary: Gets the metadata of all the entries of the root dir
      operationId: repoGetContentsList
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: The name of the commit/branch/tag. Default the repository’s default
            branch (usually master)
          name: ref
          in: query
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ContentsListResponse"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/contents/{filepath}":
    get:
      tags:
        - repository
      summary: Gets the metadata and contents (if a file) of an entry in a repository,
        or a list of entries if a dir
      operationId: repoGetContents
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: path of the dir, file, symlink or submodule in the repo
          name: filepath
          in: path
          required: true
          schema:
            type: string
        - description: The name of the commit/branch/tag. Default the repository’s default
            branch (usually master)
          name: ref
          in: query
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ContentsResponse"
        "404":
          $ref: "#/components/responses/notFound"
    put:
      tags:
        - repository
      summary: Update a file in a repository
      operationId: repoUpdateFile
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: path of the file to update
          name: filepath
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFileOptions"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/FileResponse"
        "403":
          $ref: "#/components/responses/error"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/error"
    post:
      tags:
        - repository
      summary: Create a file in a repository
      operationId: repoCreateFile
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: path of the file to create
          name: filepath
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFileOptions"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/FileResponse"
        "403":
          $ref: "#/components/responses/error"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/error"
    delete:
      tags:
        - repository
      summary: Delete a file in a repository
      operationId: repoDeleteFile
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: path of the file to delete
          name: filepath
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteFileOptions"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/FileDeleteResponse"
        "400":
          $ref: "#/components/responses/error"
        "403":
          $ref: "#/components/responses/error"
        "404":
          $ref: "#/components/responses/error"
  "/repos/{owner}/{repo}/editorconfig/{filepath}":
    get:
      tags:
        - repository
      summary: Get the EditorConfig definitions of a file in a repository
      operationId: repoGetEditorConfig
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: filepath of file to get
          name: filepath
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: success
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/forks":
    get:
      tags:
        - repository
      summary: List a repository's forks
      operationId: listForks
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
    post:
      tags:
        - repository
      summary: Fork a repository
      operationId: createFork
      parameters:
        - description: owner of the repo to fork
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo to fork
          name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateForkOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/CreateForkOption"
      responses:
        "202":
          $ref: "#/components/responses/Repository"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/git/blobs/{sha}":
    get:
      tags:
        - repository
      summary: Gets the blob of a repository.
      operationId: GetBlob
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: sha of the commit
          name: sha
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/GitBlobResponse"
        "400":
          $ref: "#/components/responses/error"
  "/repos/{owner}/{repo}/git/commits/{sha}":
    get:
      tags:
        - repository
      summary: Get a single commit from a repository
      operationId: repoGetSingleCommit
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: a git ref or commit sha
          name: sha
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Commit"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/git/refs":
    get:
      tags:
        - repository
      summary: Get specified ref or filtered repository's refs
      operationId: repoListAllGitRefs
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ReferenceList"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/git/refs/{ref}":
    get:
      tags:
        - repository
      summary: Get specified ref or filtered repository's refs
      operationId: repoListGitRefs
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: part or full name of the ref
          name: ref
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ReferenceList"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/git/tags/{sha}":
    get:
      tags:
        - repository
      summary: Gets the tag object of an annotated tag (not lightweight tags)
      operationId: GetAnnotatedTag
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: sha of the tag. The Git tags API only supports annotated tag
            objects, not lightweight tags.
          name: sha
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/AnnotatedTag"
        "400":
          $ref: "#/components/responses/error"
  "/repos/{owner}/{repo}/git/trees/{sha}":
    get:
      tags:
        - repository
      summary: Gets the tree of a repository.
      operationId: GetTree
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: sha of the commit
          name: sha
          in: path
          required: true
          schema:
            type: string
        - description: show all directories and files
          name: recursive
          in: query
          schema:
            type: boolean
        - description: page number; the 'truncated' field in the response will be true if
            there are still more items after this page, false if the last page
          name: page
          in: query
          schema:
            type: integer
        - description: number of items per page
          name: per_page
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/GitTreeResponse"
        "400":
          $ref: "#/components/responses/error"
  "/repos/{owner}/{repo}/hooks":
    get:
      tags:
        - repository
      summary: List the hooks in a repository
      operationId: repoListHooks
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/HookList"
    post:
      tags:
        - repository
      summary: Create a hook
      operationId: repoCreateHook
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateHookOption"
      responses:
        "201":
          $ref: "#/components/responses/Hook"
  "/repos/{owner}/{repo}/hooks/git":
    get:
      tags:
        - repository
      summary: List the Git hooks in a repository
      operationId: repoListGitHooks
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/GitHookList"
  "/repos/{owner}/{repo}/hooks/git/{id}":
    get:
      tags:
        - repository
      summary: Get a Git hook
      operationId: repoGetGitHook
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the hook to get
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/GitHook"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      tags:
        - repository
      summary: Delete a Git hook in a repository
      operationId: repoDeleteGitHook
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the hook to get
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      tags:
        - repository
      summary: Edit a Git hook in a repository
      operationId: repoEditGitHook
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the hook to get
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditGitHookOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/EditGitHookOption"
      responses:
        "200":
          $ref: "#/components/responses/GitHook"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/hooks/{id}":
    get:
      tags:
        - repository
      summary: Get a hook
      operationId: repoGetHook
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the hook to get
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Hook"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      tags:
        - repository
      summary: Delete a hook in a repository
      operationId: repoDeleteHook
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the hook to delete
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      tags:
        - repository
      summary: Edit a hook in a repository
      operationId: repoEditHook
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the hook
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditHookOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/EditHookOption"
      responses:
        "200":
          $ref: "#/components/responses/Hook"
  "/repos/{owner}/{repo}/hooks/{id}/tests":
    post:
      tags:
        - repository
      summary: Test a push webhook
      operationId: repoTestHook
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the hook to test
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
  "/repos/{owner}/{repo}/issue_templates":
    get:
      tags:
        - repository
      summary: Get available issue templates for a repository
      operationId: repoGetIssueTemplates
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/IssueTemplates"
  "/repos/{owner}/{repo}/issues":
    get:
      tags:
        - issue
      summary: List a repository's issues
      operationId: issueListIssues
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: whether issue is open or closed
          name: state
          in: query
          schema:
            type: string
            enum:
              - closed
              - open
              - all
        - description: comma separated list of labels. Fetch only issues that have any of
            this labels. Non existent labels are discarded
          name: labels
          in: query
          schema:
            type: string
        - description: search string
          name: q
          in: query
          schema:
            type: string
        - description: filter by type (issues / pulls) if set
          name: type
          in: query
          schema:
            type: string
            enum:
              - issues
              - pulls
        - description: comma separated list of milestone names or ids. It uses names and
            fall back to ids. Fetch only issues that have any of this
            milestones. Non existent milestones are discarded
          name: milestones
          in: query
          schema:
            type: string
        - description: Only show notifications updated after the given time. This is a
            timestamp in RFC 3339 format
          name: since
          in: query
          schema:
            type: string
            format: date-time
        - description: Only show notifications updated before the given time. This is a
            timestamp in RFC 3339 format
          name: before
          in: query
          schema:
            type: string
            format: date-time
        - description: filter (issues / pulls) created to
          name: created_by
          in: query
          schema:
            type: string
        - description: filter (issues / pulls) assigned to
          name: assigned_by
          in: query
          schema:
            type: string
        - description: filter (issues / pulls) mentioning to
          name: mentioned_by
          in: query
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/IssueList"
    post:
      tags:
        - issue
      summary: Create an issue. If using deadline only the date will be taken into
        account, and time of day ignored.
      operationId: issueCreateIssue
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIssueOption"
      responses:
        "201":
          $ref: "#/components/responses/Issue"
        "403":
          $ref: "#/components/responses/forbidden"
        "412":
          $ref: "#/components/responses/error"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/issues/comments":
    get:
      tags:
        - issue
      summary: List all comments in a repository
      operationId: issueGetRepoComments
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: if provided, only comments updated since the provided time are
            returned.
          name: since
          in: query
          schema:
            type: string
            format: date-time
        - description: if provided, only comments updated before the provided time are
            returned.
          name: before
          in: query
          schema:
            type: string
            format: date-time
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/CommentList"
  "/repos/{owner}/{repo}/issues/comments/{id}":
    get:
      tags:
        - issue
      summary: Get a comment
      operationId: issueGetComment
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the comment
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Comment"
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      tags:
        - issue
      summary: Delete a comment
      operationId: issueDeleteComment
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of comment to delete
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      tags:
        - issue
      summary: Edit a comment
      operationId: issueEditComment
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the comment to edit
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EditIssueCommentOption"
      responses:
        "200":
          $ref: "#/components/responses/Comment"
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/issues/comments/{id}/reactions":
    get:
      tags:
        - issue
      summary: Get a list of reactions from a comment of an issue
      operationId: issueGetCommentReactions
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the comment to edit
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/ReactionList"
        "403":
          $ref: "#/components/responses/forbidden"
    post:
      tags:
        - issue
      summary: Add a reaction to a comment of an issue
      operationId: issuePostCommentReaction
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the comment to edit
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EditReactionOption"
      responses:
        "200":
          $ref: "#/components/responses/Reaction"
        "201":
          $ref: "#/components/responses/Reaction"
        "403":
          $ref: "#/components/responses/forbidden"
    delete:
      tags:
        - issue
      summary: Remove a reaction from a comment of an issue
      operationId: issueDeleteCommentReaction
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the comment to edit
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EditReactionOption"
      responses:
        "200":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
  "/repos/{owner}/{repo}/issues/{index}":
    get:
      tags:
        - issue
      summary: Get an issue
      operationId: issueGetIssue
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue to get
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Issue"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      tags:
        - issue
      summary: Edit an issue. If using deadline only the date will be taken into
        account, and time of day ignored.
      operationId: issueEditIssue
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue to edit
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditIssueOption"
      responses:
        "201":
          $ref: "#/components/responses/Issue"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
        "412":
          $ref: "#/components/responses/error"
  "/repos/{owner}/{repo}/issues/{index}/comments":
    get:
      tags:
        - issue
      summary: List all comments on an issue
      operationId: issueGetComments
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: if provided, only comments updated since the specified time are
            returned.
          name: since
          in: query
          schema:
            type: string
            format: date-time
        - description: if provided, only comments updated before the provided time are
            returned.
          name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        "200":
          $ref: "#/components/responses/CommentList"
    post:
      tags:
        - issue
      summary: Add a comment to an issue
      operationId: issueCreateComment
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIssueCommentOption"
      responses:
        "201":
          $ref: "#/components/responses/Comment"
        "403":
          $ref: "#/components/responses/forbidden"
  "/repos/{owner}/{repo}/issues/{index}/comments/{id}":
    delete:
      tags:
        - issue
      summary: Delete a comment
      operationId: issueDeleteCommentDeprecated
      deprecated: true
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: this parameter is ignored
          name: index
          in: path
          required: true
          schema:
            type: integer
        - description: id of comment to delete
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      tags:
        - issue
      summary: Edit a comment
      operationId: issueEditCommentDeprecated
      deprecated: true
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: this parameter is ignored
          name: index
          in: path
          required: true
          schema:
            type: integer
        - description: id of the comment to edit
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EditIssueCommentOption"
      responses:
        "200":
          $ref: "#/components/responses/Comment"
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/issues/{index}/deadline":
    post:
      tags:
        - issue
      summary: Set an issue deadline. If set to null, the deadline is deleted. If using
        deadline only the date will be taken into account, and time of day
        ignored.
      operationId: issueEditIssueDeadline
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue to create or update a deadline on
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditDeadlineOption"
      responses:
        "201":
          $ref: "#/components/responses/IssueDeadline"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/issues/{index}/labels":
    get:
      tags:
        - issue
      summary: Get an issue's labels
      operationId: issueGetLabels
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/LabelList"
        "404":
          $ref: "#/components/responses/notFound"
    put:
      tags:
        - issue
      summary: Replace an issue's labels
      operationId: issueReplaceLabels
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/IssueLabelsOption"
      responses:
        "200":
          $ref: "#/components/responses/LabelList"
        "403":
          $ref: "#/components/responses/forbidden"
    post:
      tags:
        - issue
      summary: Add a label to an issue
      operationId: issueAddLabel
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/IssueLabelsOption"
      responses:
        "200":
          $ref: "#/components/responses/LabelList"
        "403":
          $ref: "#/components/responses/forbidden"
    delete:
      tags:
        - issue
      summary: Remove all labels from an issue
      operationId: issueClearLabels
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
  "/repos/{owner}/{repo}/issues/{index}/labels/{id}":
    delete:
      tags:
        - issue
      summary: Remove a label from an issue
      operationId: issueRemoveLabel
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: id of the label to remove
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/issues/{index}/reactions":
    get:
      tags:
        - issue
      summary: Get a list reactions of an issue
      operationId: issueGetIssueReactions
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/ReactionList"
        "403":
          $ref: "#/components/responses/forbidden"
    post:
      tags:
        - issue
      summary: Add a reaction to an issue
      operationId: issuePostIssueReaction
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EditReactionOption"
      responses:
        "200":
          $ref: "#/components/responses/Reaction"
        "201":
          $ref: "#/components/responses/Reaction"
        "403":
          $ref: "#/components/responses/forbidden"
    delete:
      tags:
        - issue
      summary: Remove a reaction from an issue
      operationId: issueDeleteIssueReaction
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EditReactionOption"
      responses:
        "200":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
  "/repos/{owner}/{repo}/issues/{index}/stopwatch/delete":
    delete:
      tags:
        - issue
      summary: Delete an issue's existing stopwatch.
      operationId: issueDeleteStopWatch
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue to stop the stopwatch on
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          description: Not repo writer, user does not have rights to toggle stopwatch
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          description: Cannot cancel a non existent stopwatch
  "/repos/{owner}/{repo}/issues/{index}/stopwatch/start":
    post:
      tags:
        - issue
      summary: Start stopwatch on an issue.
      operationId: issueStartStopWatch
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue to create the stopwatch on
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "201":
          $ref: "#/components/responses/empty"
        "403":
          description: Not repo writer, user does not have rights to toggle stopwatch
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          description: Cannot start a stopwatch again if it already exists
  "/repos/{owner}/{repo}/issues/{index}/stopwatch/stop":
    post:
      tags:
        - issue
      summary: Stop an issue's existing stopwatch.
      operationId: issueStopStopWatch
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue to stop the stopwatch on
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "201":
          $ref: "#/components/responses/empty"
        "403":
          description: Not repo writer, user does not have rights to toggle stopwatch
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          description: Cannot stop a non existent stopwatch
  "/repos/{owner}/{repo}/issues/{index}/subscriptions":
    get:
      tags:
        - issue
      summary: Get users who subscribed on an issue.
      operationId: issueSubscriptions
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/UserList"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/issues/{index}/subscriptions/check":
    get:
      tags:
        - issue
      summary: Check if user is subscribed to an issue
      operationId: issueCheckSubscription
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/WatchInfo"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}":
    put:
      tags:
        - issue
      summary: Subscribe user to issue
      operationId: issueAddSubscription
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: user to subscribe
          name: user
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Already subscribed
        "201":
          description: Successfully Subscribed
        "304":
          description: User can only subscribe itself if he is no admin
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      tags:
        - issue
      summary: Unsubscribe user from issue
      operationId: issueDeleteSubscription
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: user witch unsubscribe
          name: user
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Already unsubscribed
        "201":
          description: Successfully Unsubscribed
        "304":
          description: User can only subscribe itself if he is no admin
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/issues/{index}/times":
    get:
      tags:
        - issue
      summary: List an issue's tracked times
      operationId: issueTrackedTimes
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: optional filter by user (available for issue managers)
          name: user
          in: query
          schema:
            type: string
        - description: Only show times updated after the given time. This is a timestamp in
            RFC 3339 format
          name: since
          in: query
          schema:
            type: string
            format: date-time
        - description: Only show times updated before the given time. This is a timestamp
            in RFC 3339 format
          name: before
          in: query
          schema:
            type: string
            format: date-time
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/TrackedTimeList"
        "404":
          $ref: "#/components/responses/notFound"
    post:
      tags:
        - issue
      summary: Add tracked time to a issue
      operationId: issueAddTime
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddTimeOption"
      responses:
        "200":
          $ref: "#/components/responses/TrackedTime"
        "400":
          $ref: "#/components/responses/error"
        "403":
          $ref: "#/components/responses/forbidden"
    delete:
      tags:
        - issue
      summary: Reset a tracked time of an issue
      operationId: issueResetTime
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue to add tracked time to
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "400":
          $ref: "#/components/responses/error"
        "403":
          $ref: "#/components/responses/forbidden"
  "/repos/{owner}/{repo}/issues/{index}/times/{id}":
    delete:
      tags:
        - issue
      summary: Delete specific tracked time
      operationId: issueDeleteTime
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the issue
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: id of time to delete
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "400":
          $ref: "#/components/responses/error"
        "403":
          $ref: "#/components/responses/forbidden"
  "/repos/{owner}/{repo}/keys":
    get:
      tags:
        - repository
      summary: List a repository's keys
      operationId: repoListKeys
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: the key_id to search for
          name: key_id
          in: query
          schema:
            type: integer
        - description: fingerprint of the key
          name: fingerprint
          in: query
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/DeployKeyList"
    post:
      tags:
        - repository
      summary: Add a key to a repository
      operationId: repoCreateKey
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CreateKeyOption"
      responses:
        "201":
          $ref: "#/components/responses/DeployKey"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/keys/{id}":
    get:
      tags:
        - repository
      summary: Get a repository's key by id
      operationId: repoGetKey
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the key to get
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/DeployKey"
    delete:
      tags:
        - repository
      summary: Delete a key from a repository
      operationId: repoDeleteKey
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the key to delete
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
  "/repos/{owner}/{repo}/labels":
    get:
      tags:
        - issue
      summary: Get all of a repository's labels
      operationId: issueListLabels
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/LabelList"
    post:
      tags:
        - issue
      summary: Create a label
      operationId: issueCreateLabel
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/CreateLabelOption"
      responses:
        "201":
          $ref: "#/components/responses/Label"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/labels/{id}":
    get:
      tags:
        - issue
      summary: Get a single label
      operationId: issueGetLabel
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the label to get
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Label"
    delete:
      tags:
        - issue
      summary: Delete a label
      operationId: issueDeleteLabel
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the label to delete
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
    patch:
      tags:
        - issue
      summary: Update a label
      operationId: issueEditLabel
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the label to edit
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EditLabelOption"
      responses:
        "200":
          $ref: "#/components/responses/Label"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/languages":
    get:
      tags:
        - repository
      summary: Get languages and number of bytes of code written
      operationId: repoGetLanguages
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/LanguageStatistics"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/milestones":
    get:
      tags:
        - issue
      summary: Get all of a repository's opened milestones
      operationId: issueGetMilestonesList
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: Milestone state, Recognised values are open, closed and all.
            Defaults to "open"
          name: state
          in: query
          schema:
            type: string
        - description: filter by milestone name
          name: name
          in: query
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/MilestoneList"
    post:
      tags:
        - issue
      summary: Create a milestone
      operationId: issueCreateMilestone
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMilestoneOption"
      responses:
        "201":
          $ref: "#/components/responses/Milestone"
  "/repos/{owner}/{repo}/milestones/{id}":
    get:
      tags:
        - issue
      summary: Get a milestone
      operationId: issueGetMilestone
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: the milestone to get, identified by ID and if not available by name
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Milestone"
    delete:
      tags:
        - issue
      summary: Delete a milestone
      operationId: issueDeleteMilestone
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: the milestone to delete, identified by ID and if not available by
            name
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
    patch:
      tags:
        - issue
      summary: Update a milestone
      operationId: issueEditMilestone
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: the milestone to edit, identified by ID and if not available by name
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditMilestoneOption"
      responses:
        "200":
          $ref: "#/components/responses/Milestone"
  "/repos/{owner}/{repo}/mirror-sync":
    post:
      tags:
        - repository
      summary: Sync a mirrored repository
      operationId: repoMirrorSync
      parameters:
        - description: owner of the repo to sync
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo to sync
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
  "/repos/{owner}/{repo}/notifications":
    get:
      tags:
        - notification
      summary: List users's notification threads on a specific repo
      operationId: notifyGetRepoList
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: If true, show notifications marked as read. Default value is false
          name: all
          in: query
          schema:
            type: boolean
        - description: "Show notifications with the provided status types. Options are:
            unread, read and/or pinned. Defaults to unread & pinned"
          name: status-types
          in: query
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: filter notifications by subject type
          name: subject-type
          in: query
          explode: true
          schema:
            type: array
            items:
              enum:
                - issue
                - pull
                - commit
                - repository
              type: string
        - description: Only show notifications updated after the given time. This is a
            timestamp in RFC 3339 format
          name: since
          in: query
          schema:
            type: string
            format: date-time
        - description: Only show notifications updated before the given time. This is a
            timestamp in RFC 3339 format
          name: before
          in: query
          schema:
            type: string
            format: date-time
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/NotificationThreadList"
    put:
      tags:
        - notification
      summary: Mark notification threads as read, pinned or unread on a specific repo
      operationId: notifyReadRepoList
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: If true, mark all notifications on this repo. Default value is false
          name: all
          in: query
          schema:
            type: string
        - description: "Mark notifications with the provided status types. Options are:
            unread, read and/or pinned. Defaults to unread."
          name: status-types
          in: query
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: Status to mark notifications as. Defaults to read.
          name: to-status
          in: query
          schema:
            type: string
        - description: Describes the last point that notifications were checked. Anything
            updated since this time will not be updated.
          name: last_read_at
          in: query
          schema:
            type: string
            format: date-time
      responses:
        "205":
          $ref: "#/components/responses/empty"
  "/repos/{owner}/{repo}/pulls":
    get:
      tags:
        - repository
      summary: List a repo's pull requests
      operationId: repoListPullRequests
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: "State of pull request: open or closed (optional)"
          name: state
          in: query
          schema:
            type: string
            enum:
              - closed
              - open
              - all
        - description: Type of sort
          name: sort
          in: query
          schema:
            type: string
            enum:
              - oldest
              - recentupdate
              - leastupdate
              - mostcomment
              - leastcomment
              - priority
        - description: ID of the milestone
          name: milestone
          in: query
          schema:
            type: integer
            format: int64
        - description: Label IDs
          name: labels
          in: query
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int64
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/PullRequestList"
    post:
      tags:
        - repository
      summary: Create a pull request
      operationId: repoCreatePullRequest
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePullRequestOption"
      responses:
        "201":
          $ref: "#/components/responses/PullRequest"
        "409":
          $ref: "#/components/responses/error"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/pulls/{index}":
    get:
      tags:
        - repository
      summary: Get a pull request
      operationId: repoGetPullRequest
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request to get
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/PullRequest"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      tags:
        - repository
      summary: Update a pull request. If using deadline only the date will be taken
        into account, and time of day ignored.
      operationId: repoEditPullRequest
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request to edit
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditPullRequestOption"
      responses:
        "201":
          $ref: "#/components/responses/PullRequest"
        "403":
          $ref: "#/components/responses/forbidden"
        "409":
          $ref: "#/components/responses/error"
        "412":
          $ref: "#/components/responses/error"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/pulls/{index}.diff":
    get:
      tags:
        - repository
      summary: Get a pull request diff
      operationId: repoDownloadPullDiff
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request to get
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/string"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/pulls/{index}.patch":
    get:
      tags:
        - repository
      summary: Get a pull request patch file
      operationId: repoDownloadPullPatch
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request to get
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/string"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/pulls/{index}/commits":
    get:
      tags:
        - repository
      summary: Get commits for a pull request
      operationId: repoGetPullRequestCommits
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request to get
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/CommitList"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/pulls/{index}/merge":
    get:
      tags:
        - repository
      summary: Check if a pull request has been merged
      operationId: repoPullRequestIsMerged
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: pull request has been merged
        "404":
          description: pull request has not been merged
    post:
      tags:
        - repository
      summary: Merge a pull request
      operationId: repoMergePullRequest
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request to merge
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MergePullRequestOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/MergePullRequestOption"
      responses:
        "200":
          $ref: "#/components/responses/empty"
        "405":
          $ref: "#/components/responses/empty"
        "409":
          $ref: "#/components/responses/error"
  "/repos/{owner}/{repo}/pulls/{index}/requested_reviewers":
    post:
      tags:
        - repository
      summary: create review requests for a pull request
      operationId: repoCreatePullReviewRequests
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/PullReviewRequestOptions"
      responses:
        "201":
          $ref: "#/components/responses/PullReviewList"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/validationError"
    delete:
      tags:
        - repository
      summary: cancel review requests for a pull request
      operationId: repoDeletePullReviewRequests
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/PullReviewRequestOptions"
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/pulls/{index}/reviews":
    get:
      tags:
        - repository
      summary: List all reviews for a pull request
      operationId: repoListPullReviews
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/PullReviewList"
        "404":
          $ref: "#/components/responses/notFound"
    post:
      tags:
        - repository
      summary: Create a review to an pull request
      operationId: repoCreatePullReview
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePullReviewOptions"
          text/plain:
            schema:
              $ref: "#/components/schemas/CreatePullReviewOptions"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/PullReview"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}":
    get:
      tags:
        - repository
      summary: Get a specific review for a pull request
      operationId: repoGetPullReview
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: id of the review
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/PullReview"
        "404":
          $ref: "#/components/responses/notFound"
    post:
      tags:
        - repository
      summary: Submit a pending review to an pull request
      operationId: repoSubmitPullReview
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: id of the review
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitPullReviewOptions"
          text/plain:
            schema:
              $ref: "#/components/schemas/SubmitPullReviewOptions"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/PullReview"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/validationError"
    delete:
      tags:
        - repository
      summary: Delete a specific review from a pull request
      operationId: repoDeletePullReview
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: id of the review
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/comments":
    get:
      tags:
        - repository
      summary: Get a specific review for a pull request
      operationId: repoGetPullReviewComments
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: id of the review
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/PullReviewCommentList"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/dismissals":
    post:
      tags:
        - repository
      summary: Dismiss a review for a pull request
      operationId: repoDismissPullReview
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: id of the review
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DismissPullReviewOptions"
          text/plain:
            schema:
              $ref: "#/components/schemas/DismissPullReviewOptions"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/PullReview"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/undismissals":
    post:
      tags:
        - repository
      summary: Cancel to dismiss a review for a pull request
      operationId: repoUnDismissPullReview
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: id of the review
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/PullReview"
        "403":
          $ref: "#/components/responses/forbidden"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/pulls/{index}/update":
    post:
      tags:
        - repository
      summary: Merge PR's baseBranch into headBranch
      operationId: repoUpdatePullRequest
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: index of the pull request to get
          name: index
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/error"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/raw/{filepath}":
    get:
      tags:
        - repository
      summary: Get a file from a repository
      operationId: repoGetRawFile
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: filepath of the file to get
          name: filepath
          in: path
          required: true
          schema:
            type: string
        - description: The name of the commit/branch/tag. Default the repository’s default
            branch (usually master)
          name: ref
          in: query
          schema:
            type: string
      responses:
        "200":
          description: success
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/releases":
    get:
      tags:
        - repository
      summary: List a repo's releases
      operationId: repoListReleases
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: filter (exclude / include) drafts, if you dont have repo write
            access none will show
          name: draft
          in: query
          schema:
            type: boolean
        - description: filter (exclude / include) pre-releases
          name: pre-release
          in: query
          schema:
            type: boolean
        - description: page size of results, deprecated - use limit
          name: per_page
          in: query
          schema:
            type: integer
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/ReleaseList"
    post:
      tags:
        - repository
      summary: Create a release
      operationId: repoCreateRelease
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReleaseOption"
      responses:
        "201":
          $ref: "#/components/responses/Release"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/error"
  "/repos/{owner}/{repo}/releases/tags/{tag}":
    get:
      tags:
        - repository
      summary: Get a release by tag name
      operationId: repoGetReleaseByTag
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: tag name of the release to get
          name: tag
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Release"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      tags:
        - repository
      summary: Delete a release by tag name
      operationId: repoDeleteReleaseByTag
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: tag name of the release to delete
          name: tag
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/releases/{id}":
    get:
      tags:
        - repository
      summary: Get a release
      operationId: repoGetRelease
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the release to get
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Release"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      tags:
        - repository
      summary: Delete a release
      operationId: repoDeleteRelease
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the release to delete
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      tags:
        - repository
      summary: Update a release
      operationId: repoEditRelease
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the release to edit
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditReleaseOption"
      responses:
        "200":
          $ref: "#/components/responses/Release"
        "404":
          $ref: "#/components/responses/notFound"
  "/repos/{owner}/{repo}/releases/{id}/assets":
    get:
      tags:
        - repository
      summary: List release's attachments
      operationId: repoListReleaseAttachments
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the release
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/AttachmentList"
    post:
      tags:
        - repository
      summary: Create a release attachment
      operationId: repoCreateReleaseAttachment
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the release
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: name of the attachment
          name: name
          in: query
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                attachment:
                  description: attachment to upload
                  type: string
                  format: binary
              required:
                - attachment
      responses:
        "201":
          $ref: "#/components/responses/Attachment"
        "400":
          $ref: "#/components/responses/error"
  "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}":
    get:
      tags:
        - repository
      summary: Get a release attachment
      operationId: repoGetReleaseAttachment
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the release
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: id of the attachment to get
          name: attachment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Attachment"
    delete:
      tags:
        - repository
      summary: Delete a release attachment
      operationId: repoDeleteReleaseAttachment
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the release
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: id of the attachment to delete
          name: attachment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
    patch:
      tags:
        - repository
      summary: Edit a release attachment
      operationId: repoEditReleaseAttachment
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: id of the release
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: id of the attachment to edit
          name: attachment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditAttachmentOptions"
      responses:
        "201":
          $ref: "#/components/responses/Attachment"
  "/repos/{owner}/{repo}/reviewers":
    get:
      tags:
        - repository
      summary: Return all users that can be requested to review in this repo
      operationId: repoGetReviewers
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/UserList"
  "/repos/{owner}/{repo}/signing-key.gpg":
    get:
      tags:
        - repository
      summary: Get signing-key.gpg for given repository
      operationId: repoSigningKey
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: GPG armored public key
          content:
            text/plain:
              schema:
                type: string
  "/repos/{owner}/{repo}/stargazers":
    get:
      tags:
        - repository
      summary: List a repo's stargazers
      operationId: repoListStargazers
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/UserList"
  "/repos/{owner}/{repo}/statuses/{sha}":
    get:
      tags:
        - repository
      summary: Get a commit's statuses
      operationId: repoListStatuses
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: sha of the commit
          name: sha
          in: path
          required: true
          schema:
            type: string
        - description: type of sort
          name: sort
          in: query
          schema:
            type: string
            enum:
              - oldest
              - recentupdate
              - leastupdate
              - leastindex
              - highestindex
        - description: type of state
          name: state
          in: query
          schema:
            type: string
            enum:
              - pending
              - success
              - error
              - failure
              - warning
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/CommitStatusList"
        "400":
          $ref: "#/components/responses/error"
    post:
      tags:
        - repository
      summary: Create a commit status
      operationId: repoCreateStatus
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: sha of the commit
          name: sha
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStatusOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/CreateStatusOption"
      responses:
        "201":
          $ref: "#/components/responses/CommitStatus"
        "400":
          $ref: "#/components/responses/error"
  "/repos/{owner}/{repo}/subscribers":
    get:
      tags:
        - repository
      summary: List a repo's watchers
      operationId: repoListSubscribers
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/UserList"
  "/repos/{owner}/{repo}/subscription":
    get:
      tags:
        - repository
      summary: Check if the current user is watching a repo
      operationId: userCurrentCheckSubscription
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/WatchInfo"
        "404":
          description: User is not watching this repo or repo do not exist
    put:
      tags:
        - repository
      summary: Watch a repo
      operationId: userCurrentPutSubscription
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/WatchInfo"
    delete:
      tags:
        - repository
      summary: Unwatch a repo
      operationId: userCurrentDeleteSubscription
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
  "/repos/{owner}/{repo}/tags":
    get:
      tags:
        - repository
      summary: List a repository's tags
      operationId: repoListTags
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results, default maximum page size is 50
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/TagList"
    post:
      tags:
        - repository
      summary: Create a new git tag in a repository
      operationId: repoCreateTag
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTagOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/CreateTagOption"
      responses:
        "200":
          $ref: "#/components/responses/Tag"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/conflict"
  "/repos/{owner}/{repo}/tags/{tag}":
    get:
      tags:
        - repository
      summary: Get the tag of a repository by tag name
      operationId: repoGetTag
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: name of tag
          name: tag
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Tag"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      tags:
        - repository
      summary: Delete a repository's tag by name
      operationId: repoDeleteTag
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: name of tag to delete
          name: tag
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/conflict"
  "/repos/{owner}/{repo}/teams":
    get:
      tags:
        - repository
      summary: List a repository's teams
      operationId: repoListTeams
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/TeamList"
  "/repos/{owner}/{repo}/teams/{team}":
    get:
      tags:
        - repository
      summary: Check if a team is assigned to a repository
      operationId: repoCheckTeam
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: team name
          name: team
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/Team"
        "404":
          $ref: "#/components/responses/notFound"
        "405":
          $ref: "#/components/responses/error"
    put:
      tags:
        - repository
      summary: Add a team to a repository
      operationId: repoAddTeam
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: team name
          name: team
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "405":
          $ref: "#/components/responses/error"
        "422":
          $ref: "#/components/responses/validationError"
    delete:
      tags:
        - repository
      summary: Delete a team from a repository
      operationId: repoDeleteTeam
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: team name
          name: team
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "405":
          $ref: "#/components/responses/error"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{owner}/{repo}/times":
    get:
      tags:
        - repository
      summary: List a repo's tracked times
      operationId: repoTrackedTimes
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: optional filter by user (available for issue managers)
          name: user
          in: query
          schema:
            type: string
        - description: Only show times updated after the given time. This is a timestamp in
            RFC 3339 format
          name: since
          in: query
          schema:
            type: string
            format: date-time
        - description: Only show times updated before the given time. This is a timestamp
            in RFC 3339 format
          name: before
          in: query
          schema:
            type: string
            format: date-time
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/TrackedTimeList"
        "400":
          $ref: "#/components/responses/error"
        "403":
          $ref: "#/components/responses/forbidden"
  "/repos/{owner}/{repo}/times/{user}":
    get:
      tags:
        - repository
      summary: List a user's tracked times in a repo
      operationId: userTrackedTimes
      deprecated: true
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: username of user
          name: user
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/TrackedTimeList"
        "400":
          $ref: "#/components/responses/error"
        "403":
          $ref: "#/components/responses/forbidden"
  "/repos/{owner}/{repo}/topics":
    get:
      tags:
        - repository
      summary: Get list of topics that a repository has
      operationId: repoListTopics
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/TopicNames"
    put:
      tags:
        - repository
      summary: Replace list of topics for a repository
      operationId: repoUpdateTopics
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepoTopicOptions"
          text/plain:
            schema:
              $ref: "#/components/schemas/RepoTopicOptions"
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "422":
          $ref: "#/components/responses/invalidTopicsError"
  "/repos/{owner}/{repo}/topics/{topic}":
    put:
      tags:
        - repository
      summary: Add a topic to a repository
      operationId: repoAddTopic
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: name of the topic to add
          name: topic
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "422":
          $ref: "#/components/responses/invalidTopicsError"
    delete:
      tags:
        - repository
      summary: Delete a topic from a repository
      operationId: repoDeleteTopic
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
        - description: name of the topic to delete
          name: topic
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "422":
          $ref: "#/components/responses/invalidTopicsError"
  "/repos/{owner}/{repo}/transfer":
    post:
      tags:
        - repository
      summary: Transfer a repo ownership
      operationId: repoTransfer
      parameters:
        - description: owner of the repo to transfer
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo to transfer
          name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRepoOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/TransferRepoOption"
        description: Transfer Options
        required: true
      responses:
        "202":
          $ref: "#/components/responses/Repository"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/validationError"
  "/repos/{template_owner}/{template_repo}/generate":
    post:
      tags:
        - repository
      summary: Create a repository using a template
      operationId: generateRepo
      parameters:
        - description: name of the template repository owner
          name: template_owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the template repository
          name: template_repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateRepoOption"
      responses:
        "201":
          $ref: "#/components/responses/Repository"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          description: The repository with the same name already exists.
        "422":
          $ref: "#/components/responses/validationError"
  "/repositories/{id}":
    get:
      tags:
        - repository
      summary: Get a repository by id
      operationId: repoGetByID
      parameters:
        - description: id of the repo to get
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Repository"
  /settings/api:
    get:
      tags:
        - settings
      summary: Get instance's global settings for api
      operationId: getGeneralAPISettings
      responses:
        "200":
          $ref: "#/components/responses/GeneralAPISettings"
  /settings/attachment:
    get:
      tags:
        - settings
      summary: Get instance's global settings for Attachment
      operationId: getGeneralAttachmentSettings
      responses:
        "200":
          $ref: "#/components/responses/GeneralAttachmentSettings"
  /settings/repository:
    get:
      tags:
        - settings
      summary: Get instance's global settings for repositories
      operationId: getGeneralRepositorySettings
      responses:
        "200":
          $ref: "#/components/responses/GeneralRepoSettings"
  /settings/ui:
    get:
      tags:
        - settings
      summary: Get instance's global settings for ui
      operationId: getGeneralUISettings
      responses:
        "200":
          $ref: "#/components/responses/GeneralUISettings"
  /signing-key.gpg:
    get:
      tags:
        - miscellaneous
      summary: Get default signing-key.gpg
      operationId: getSigningKey
      responses:
        "200":
          description: GPG armored public key
          content:
            text/plain:
              schema:
                type: string
  "/teams/{id}":
    get:
      tags:
        - organization
      summary: Get a team
      operationId: orgGetTeam
      parameters:
        - description: id of the team to get
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/Team"
    delete:
      tags:
        - organization
      summary: Delete a team
      operationId: orgDeleteTeam
      parameters:
        - description: id of the team to delete
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: team deleted
    patch:
      tags:
        - organization
      summary: Edit a team
      operationId: orgEditTeam
      parameters:
        - description: id of the team to edit
          name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditTeamOption"
      responses:
        "200":
          $ref: "#/components/responses/Team"
  "/teams/{id}/members":
    get:
      tags:
        - organization
      summary: List a team's members
      operationId: orgListTeamMembers
      parameters:
        - description: id of the team
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/UserList"
  "/teams/{id}/members/{username}":
    get:
      tags:
        - organization
      summary: List a particular member of team
      operationId: orgListTeamMember
      parameters:
        - description: id of the team
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: username of the member to list
          name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/User"
        "404":
          $ref: "#/components/responses/notFound"
    put:
      tags:
        - organization
      summary: Add a team member
      operationId: orgAddTeamMember
      parameters:
        - description: id of the team
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: username of the user to add
          name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      tags:
        - organization
      summary: Remove a team member
      operationId: orgRemoveTeamMember
      parameters:
        - description: id of the team
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: username of the user to remove
          name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
  "/teams/{id}/repos":
    get:
      tags:
        - organization
      summary: List a team's repos
      operationId: orgListTeamRepos
      parameters:
        - description: id of the team
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
  "/teams/{id}/repos/{org}/{repo}":
    put:
      tags:
        - organization
      summary: Add a repository to a team
      operationId: orgAddTeamRepository
      parameters:
        - description: id of the team
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: organization that owns the repo to add
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo to add
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
    delete:
      description: This does not delete the repository, it only removes the repository from
        the team.
      tags:
        - organization
      summary: Remove a repository from a team
      operationId: orgRemoveTeamRepository
      parameters:
        - description: id of the team
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: organization that owns the repo to remove
          name: org
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo to remove
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
  /topics/search:
    get:
      tags:
        - repository
      summary: search topics via keyword
      operationId: topicSearch
      parameters:
        - description: keywords to search
          name: q
          in: query
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/TopicListResponse"
        "403":
          $ref: "#/components/responses/forbidden"
  /user:
    get:
      tags:
        - user
      summary: Get the authenticated user
      operationId: userGetCurrent
      responses:
        "200":
          $ref: "#/components/responses/User"
  /user/applications/oauth2:
    get:
      tags:
        - user
      summary: List the authenticated user's oauth2 applications
      operationId: userGetOauth2Application
      parameters:
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/OAuth2ApplicationList"
    post:
      tags:
        - user
      summary: creates a new OAuth2 application
      operationId: userCreateOAuth2Application
      requestBody:
        $ref: "#/components/requestBodies/CreateOAuth2ApplicationOptions"
      responses:
        "201":
          $ref: "#/components/responses/OAuth2Application"
        "400":
          $ref: "#/components/responses/error"
  "/user/applications/oauth2/{id}":
    get:
      tags:
        - user
      summary: get an OAuth2 Application
      operationId: userGetOAuth2Application
      parameters:
        - description: Application ID to be found
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/OAuth2Application"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      tags:
        - user
      summary: delete an OAuth2 Application
      operationId: userDeleteOAuth2Application
      parameters:
        - description: token to be deleted
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      tags:
        - user
      summary: update an OAuth2 Application, this includes regenerating the client
        secret
      operationId: userUpdateOAuth2Application
      parameters:
        - description: application to be updated
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/CreateOAuth2ApplicationOptions"
      responses:
        "200":
          $ref: "#/components/responses/OAuth2Application"
        "404":
          $ref: "#/components/responses/notFound"
  /user/emails:
    get:
      tags:
        - user
      summary: List the authenticated user's email addresses
      operationId: userListEmails
      responses:
        "200":
          $ref: "#/components/responses/EmailList"
    post:
      tags:
        - user
      summary: Add email addresses
      operationId: userAddEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEmailOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/CreateEmailOption"
      responses:
        "201":
          $ref: "#/components/responses/EmailList"
        "422":
          $ref: "#/components/responses/validationError"
    delete:
      tags:
        - user
      summary: Delete email addresses
      operationId: userDeleteEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteEmailOption"
          text/plain:
            schema:
              $ref: "#/components/schemas/DeleteEmailOption"
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
  /user/followers:
    get:
      tags:
        - user
      summary: List the authenticated user's followers
      operationId: userCurrentListFollowers
      parameters:
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/UserList"
  /user/following:
    get:
      tags:
        - user
      summary: List the users that the authenticated user is following
      operationId: userCurrentListFollowing
      parameters:
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/UserList"
  "/user/following/{username}":
    get:
      tags:
        - user
      summary: Check whether a user is followed by the authenticated user
      operationId: userCurrentCheckFollowing
      parameters:
        - description: username of followed user
          name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
    put:
      tags:
        - user
      summary: Follow a user
      operationId: userCurrentPutFollow
      parameters:
        - description: username of user to follow
          name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
    delete:
      tags:
        - user
      summary: Unfollow a user
      operationId: userCurrentDeleteFollow
      parameters:
        - description: username of user to unfollow
          name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
  /user/gpg_key_token:
    get:
      tags:
        - user
      summary: Get a Token to verify
      operationId: getVerificationToken
      responses:
        "200":
          $ref: "#/components/responses/string"
        "404":
          $ref: "#/components/responses/notFound"
  /user/gpg_key_verify:
    post:
      tags:
        - user
      summary: Verify a GPG key
      operationId: userVerifyGPGKey
      responses:
        "201":
          $ref: "#/components/responses/GPGKey"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/validationError"
  /user/gpg_keys:
    get:
      tags:
        - user
      summary: List the authenticated user's GPG keys
      operationId: userCurrentListGPGKeys
      parameters:
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/GPGKeyList"
    post:
      tags:
        - user
      summary: Create a GPG key
      operationId: userCurrentPostGPGKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGPGKeyOption"
      responses:
        "201":
          $ref: "#/components/responses/GPGKey"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/validationError"
  "/user/gpg_keys/{id}":
    get:
      tags:
        - user
      summary: Get a GPG key
      operationId: userCurrentGetGPGKey
      parameters:
        - description: id of key to get
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/GPGKey"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      tags:
        - user
      summary: Remove a GPG key
      operationId: userCurrentDeleteGPGKey
      parameters:
        - description: id of key to delete
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
  /user/keys:
    get:
      tags:
        - user
      summary: List the authenticated user's public keys
      operationId: userCurrentListKeys
      parameters:
        - description: fingerprint of the key
          name: fingerprint
          in: query
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/PublicKeyList"
    post:
      tags:
        - user
      summary: Create a public key
      operationId: userCurrentPostKey
      requestBody:
        $ref: "#/components/requestBodies/CreateKeyOption"
      responses:
        "201":
          $ref: "#/components/responses/PublicKey"
        "422":
          $ref: "#/components/responses/validationError"
  "/user/keys/{id}":
    get:
      tags:
        - user
      summary: Get a public key
      operationId: userCurrentGetKey
      parameters:
        - description: id of key to get
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/PublicKey"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      tags:
        - user
      summary: Delete a public key
      operationId: userCurrentDeleteKey
      parameters:
        - description: id of key to delete
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
  /user/orgs:
    get:
      tags:
        - organization
      summary: List the current user's organizations
      operationId: orgListCurrentUserOrgs
      parameters:
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/OrganizationList"
  /user/repos:
    get:
      tags:
        - user
      summary: List the repos that the authenticated user owns
      operationId: userCurrentListRepos
      parameters:
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
    post:
      tags:
        - repository
        - user
      summary: Create a repository
      operationId: createCurrentUserRepo
      requestBody:
        $ref: "#/components/requestBodies/CreateRepoOption"
      responses:
        "201":
          $ref: "#/components/responses/Repository"
        "409":
          description: The repository with the same name already exists.
        "422":
          $ref: "#/components/responses/validationError"
  /user/settings:
    get:
      tags:
        - user
      summary: Get user settings
      operationId: getUserSettings
      responses:
        "200":
          $ref: "#/components/responses/UserSettings"
    patch:
      tags:
        - user
      summary: Update user settings
      operationId: updateUserSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSettingsOptions"
          text/plain:
            schema:
              $ref: "#/components/schemas/UserSettingsOptions"
      responses:
        "200":
          $ref: "#/components/responses/UserSettings"
  /user/starred:
    get:
      tags:
        - user
      summary: The repos that the authenticated user has starred
      operationId: userCurrentListStarred
      parameters:
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
  "/user/starred/{owner}/{repo}":
    get:
      tags:
        - user
      summary: Whether the authenticated is starring the repo
      operationId: userCurrentCheckStarring
      parameters:
        - description: owner of the repo
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
    put:
      tags:
        - user
      summary: Star the given repo
      operationId: userCurrentPutStar
      parameters:
        - description: owner of the repo to star
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo to star
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
    delete:
      tags:
        - user
      summary: Unstar the given repo
      operationId: userCurrentDeleteStar
      parameters:
        - description: owner of the repo to unstar
          name: owner
          in: path
          required: true
          schema:
            type: string
        - description: name of the repo to unstar
          name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
  /user/stopwatches:
    get:
      tags:
        - user
      summary: Get list of all existing stopwatches
      operationId: userGetStopWatches
      parameters:
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/StopWatchList"
  /user/subscriptions:
    get:
      tags:
        - user
      summary: List repositories watched by the authenticated user
      operationId: userCurrentListSubscriptions
      parameters:
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
  /user/teams:
    get:
      tags:
        - user
      summary: List all the teams a user belongs to
      operationId: userListTeams
      parameters:
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/TeamList"
  /user/times:
    get:
      tags:
        - user
      summary: List the current user's tracked times
      operationId: userCurrentTrackedTimes
      parameters:
        - description: Only show times updated after the given time. This is a timestamp in
            RFC 3339 format
          name: since
          in: query
          schema:
            type: string
            format: date-time
        - description: Only show times updated before the given time. This is a timestamp
            in RFC 3339 format
          name: before
          in: query
          schema:
            type: string
            format: date-time
      responses:
        "200":
          $ref: "#/components/responses/TrackedTimeList"
  /users/search:
    get:
      tags:
        - user
      summary: Search for users
      operationId: userSearch
      parameters:
        - description: keyword
          name: q
          in: query
          schema:
            type: string
        - description: ID of the user to search for
          name: uid
          in: query
          schema:
            type: integer
            format: int64
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          description: SearchResults of a successful search
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  ok:
                    type: boolean
  "/users/{follower}/following/{followee}":
    get:
      tags:
        - user
      summary: Check if one user is following another user
      operationId: userCheckFollowing
      parameters:
        - description: username of following user
          name: follower
          in: path
          required: true
          schema:
            type: string
        - description: username of followed user
          name: followee
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
  "/users/{username}":
    get:
      tags:
        - user
      summary: Get a user
      operationId: userGet
      parameters:
        - description: username of user to get
          name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/User"
        "404":
          $ref: "#/components/responses/notFound"
  "/users/{username}/followers":
    get:
      tags:
        - user
      summary: List the given user's followers
      operationId: userListFollowers
      parameters:
        - description: username of user
          name: username
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/UserList"
  "/users/{username}/following":
    get:
      tags:
        - user
      summary: List the users that the given user is following
      operationId: userListFollowing
      parameters:
        - description: username of user
          name: username
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/UserList"
  "/users/{username}/gpg_keys":
    get:
      tags:
        - user
      summary: List the given user's GPG keys
      operationId: userListGPGKeys
      parameters:
        - description: username of user
          name: username
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/GPGKeyList"
  "/users/{username}/heatmap":
    get:
      tags:
        - user
      summary: Get a user's heatmap
      operationId: userGetHeatmapData
      parameters:
        - description: username of user to get
          name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/UserHeatmapData"
        "404":
          $ref: "#/components/responses/notFound"
  "/users/{username}/keys":
    get:
      tags:
        - user
      summary: List the given user's public keys
      operationId: userListKeys
      parameters:
        - description: username of user
          name: username
          in: path
          required: true
          schema:
            type: string
        - description: fingerprint of the key
          name: fingerprint
          in: query
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/PublicKeyList"
  "/users/{username}/orgs":
    get:
      tags:
        - organization
      summary: List a user's organizations
      operationId: orgListUserOrgs
      parameters:
        - description: username of user
          name: username
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/OrganizationList"
  "/users/{username}/repos":
    get:
      tags:
        - user
      summary: List the repos owned by the given user
      operationId: userListRepos
      parameters:
        - description: username of user
          name: username
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
  "/users/{username}/starred":
    get:
      tags:
        - user
      summary: The repos that the given user has starred
      operationId: userListStarred
      parameters:
        - description: username of user
          name: username
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
  "/users/{username}/subscriptions":
    get:
      tags:
        - user
      summary: List the repositories watched by a user
      operationId: userListSubscriptions
      parameters:
        - description: username of the user
          name: username
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/RepositoryList"
  "/users/{username}/tokens":
    get:
      tags:
        - user
      summary: List the authenticated user's access tokens
      operationId: userGetTokens
      parameters:
        - description: username of user
          name: username
          in: path
          required: true
          schema:
            type: string
        - description: page number of results to return (1-based)
          name: page
          in: query
          schema:
            type: integer
        - description: page size of results
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/AccessTokenList"
    post:
      tags:
        - user
      summary: Create an access token
      operationId: userCreateToken
      parameters:
        - x-go-name: Name
          description: username of user
          name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccessTokenOption"
      responses:
        "201":
          $ref: "#/components/responses/AccessToken"
        "400":
          $ref: "#/components/responses/error"
  "/users/{username}/tokens/{token}":
    delete:
      tags:
        - user
      summary: delete an access token
      operationId: userDeleteAccessToken
      parameters:
        - description: username of user
          name: username
          in: path
          required: true
          schema:
            type: string
        - description: token to be deleted, identified by ID and if not available by name
          name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/empty"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/error"
  /version:
    get:
      tags:
        - miscellaneous
      summary: Returns the version of the Gitea application
      operationId: getVersion
      responses:
        "200":
          $ref: "#/components/responses/ServerVersion"
security:
  - BasicAuth: []
  - Token: []
  - AccessToken: []
  - AuthorizationHeaderToken: []
  - SudoParam: []
  - SudoHeader: []
  - TOTPHeader: []
servers:
  - url: "{AppSubUrl | JSEscape | Safe}/api/v1"
    variables:
      AppSubUrl | JSEscape | Safe:
        default: unknown
components:
  responses:
    AccessToken:
      description: AccessToken represents an API access token.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AccessToken"
        text/html:
          schema:
            $ref: "#/components/schemas/AccessToken"
    AccessTokenList:
      description: AccessTokenList represents a list of API access token.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AccessToken"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AccessToken"
    AnnotatedTag:
      description: AnnotatedTag
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AnnotatedTag"
        text/html:
          schema:
            $ref: "#/components/schemas/AnnotatedTag"
    Attachment:
      description: Attachment
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Attachment"
        text/html:
          schema:
            $ref: "#/components/schemas/Attachment"
    AttachmentList:
      description: AttachmentList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Attachment"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Attachment"
    Branch:
      description: Branch
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Branch"
        text/html:
          schema:
            $ref: "#/components/schemas/Branch"
    BranchList:
      description: BranchList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Branch"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Branch"
    BranchProtection:
      description: BranchProtection
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BranchProtection"
        text/html:
          schema:
            $ref: "#/components/schemas/BranchProtection"
    BranchProtectionList:
      description: BranchProtectionList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/BranchProtection"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/BranchProtection"
    CombinedStatus:
      description: CombinedStatus
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CombinedStatus"
        text/html:
          schema:
            $ref: "#/components/schemas/CombinedStatus"
    Comment:
      description: Comment
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Comment"
        text/html:
          schema:
            $ref: "#/components/schemas/Comment"
    CommentList:
      description: CommentList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Comment"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Comment"
    Commit:
      description: Commit
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Commit"
        text/html:
          schema:
            $ref: "#/components/schemas/Commit"
    CommitList:
      description: CommitList
      headers:
        X-HasMore:
          description: True if there is another page
          schema:
            type: boolean
        X-Page:
          description: The current page
          schema:
            type: integer
            format: int64
        X-PageCount:
          description: Total number of pages
          schema:
            type: integer
            format: int64
        X-PerPage:
          description: Commits per page
          schema:
            type: integer
            format: int64
        X-Total:
          description: Total commit count
          schema:
            type: integer
            format: int64
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Commit"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Commit"
    CommitStatus:
      description: CommitStatus
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CommitStatus"
        text/html:
          schema:
            $ref: "#/components/schemas/CommitStatus"
    CommitStatusList:
      description: CommitStatusList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/CommitStatus"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/CommitStatus"
    ContentsListResponse:
      description: ContentsListResponse
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ContentsResponse"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ContentsResponse"
    ContentsResponse:
      description: ContentsResponse
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ContentsResponse"
        text/html:
          schema:
            $ref: "#/components/schemas/ContentsResponse"
    CronList:
      description: CronList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Cron"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Cron"
    DeployKey:
      description: DeployKey
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeployKey"
        text/html:
          schema:
            $ref: "#/components/schemas/DeployKey"
    DeployKeyList:
      description: DeployKeyList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/DeployKey"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/DeployKey"
    EmailList:
      description: EmailList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Email"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Email"
    EmptyRepository:
      description: EmptyRepository
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
        text/html:
          schema:
            $ref: "#/components/schemas/APIError"
    FileDeleteResponse:
      description: FileDeleteResponse
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileDeleteResponse"
        text/html:
          schema:
            $ref: "#/components/schemas/FileDeleteResponse"
    FileResponse:
      description: FileResponse
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FileResponse"
        text/html:
          schema:
            $ref: "#/components/schemas/FileResponse"
    GPGKey:
      description: GPGKey
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GPGKey"
        text/html:
          schema:
            $ref: "#/components/schemas/GPGKey"
    GPGKeyList:
      description: GPGKeyList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/GPGKey"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/GPGKey"
    GeneralAPISettings:
      description: GeneralAPISettings
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralAPISettings"
        text/html:
          schema:
            $ref: "#/components/schemas/GeneralAPISettings"
    GeneralAttachmentSettings:
      description: GeneralAttachmentSettings
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralAttachmentSettings"
        text/html:
          schema:
            $ref: "#/components/schemas/GeneralAttachmentSettings"
    GeneralRepoSettings:
      description: GeneralRepoSettings
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralRepoSettings"
        text/html:
          schema:
            $ref: "#/components/schemas/GeneralRepoSettings"
    GeneralUISettings:
      description: GeneralUISettings
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralUISettings"
        text/html:
          schema:
            $ref: "#/components/schemas/GeneralUISettings"
    GitBlobResponse:
      description: GitBlobResponse
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GitBlobResponse"
        text/html:
          schema:
            $ref: "#/components/schemas/GitBlobResponse"
    GitHook:
      description: GitHook
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GitHook"
        text/html:
          schema:
            $ref: "#/components/schemas/GitHook"
    GitHookList:
      description: GitHookList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/GitHook"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/GitHook"
    GitTreeResponse:
      description: GitTreeResponse
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GitTreeResponse"
        text/html:
          schema:
            $ref: "#/components/schemas/GitTreeResponse"
    Hook:
      description: Hook
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Hook"
        text/html:
          schema:
            $ref: "#/components/schemas/Hook"
    HookList:
      description: HookList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Hook"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Hook"
    Issue:
      description: Issue
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Issue"
        text/html:
          schema:
            $ref: "#/components/schemas/Issue"
    IssueDeadline:
      description: IssueDeadline
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/IssueDeadline"
        text/html:
          schema:
            $ref: "#/components/schemas/IssueDeadline"
    IssueList:
      description: IssueList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Issue"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Issue"
    IssueTemplates:
      description: IssueTemplates
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/IssueTemplate"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/IssueTemplate"
    Label:
      description: Label
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Label"
        text/html:
          schema:
            $ref: "#/components/schemas/Label"
    LabelList:
      description: LabelList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Label"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Label"
    LanguageStatistics:
      description: LanguageStatistics
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int64
        text/html:
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int64
    MarkdownRender:
      description: MarkdownRender is a rendered markdown document
      content:
        application/json:
          schema:
            type: string
        text/html:
          schema:
            type: string
    Milestone:
      description: Milestone
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Milestone"
        text/html:
          schema:
            $ref: "#/components/schemas/Milestone"
    MilestoneList:
      description: MilestoneList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Milestone"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Milestone"
    NotificationCount:
      description: Number of unread notifications
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotificationCount"
        text/html:
          schema:
            $ref: "#/components/schemas/NotificationCount"
    NotificationThread:
      description: NotificationThread
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotificationThread"
        text/html:
          schema:
            $ref: "#/components/schemas/NotificationThread"
    NotificationThreadList:
      description: NotificationThreadList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/NotificationThread"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/NotificationThread"
    OAuth2Application:
      description: OAuth2Application
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OAuth2Application"
        text/html:
          schema:
            $ref: "#/components/schemas/OAuth2Application"
    OAuth2ApplicationList:
      description: OAuth2ApplicationList represents a list of OAuth2 applications.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OAuth2Application"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OAuth2Application"
    Organization:
      description: Organization
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Organization"
        text/html:
          schema:
            $ref: "#/components/schemas/Organization"
    OrganizationList:
      description: OrganizationList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Organization"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Organization"
    PublicKey:
      description: PublicKey
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PublicKey"
        text/html:
          schema:
            $ref: "#/components/schemas/PublicKey"
    PublicKeyList:
      description: PublicKeyList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PublicKey"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PublicKey"
    PullRequest:
      description: PullRequest
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PullRequest"
        text/html:
          schema:
            $ref: "#/components/schemas/PullRequest"
    PullRequestList:
      description: PullRequestList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PullRequest"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PullRequest"
    PullReview:
      description: PullReview
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PullReview"
        text/html:
          schema:
            $ref: "#/components/schemas/PullReview"
    PullReviewComment:
      description: PullComment
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PullReviewComment"
        text/html:
          schema:
            $ref: "#/components/schemas/PullReviewComment"
    PullReviewCommentList:
      description: PullCommentList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PullReviewComment"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PullReviewComment"
    PullReviewList:
      description: PullReviewList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PullReview"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PullReview"
    Reaction:
      description: Reaction
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Reaction"
        text/html:
          schema:
            $ref: "#/components/schemas/Reaction"
    ReactionList:
      description: ReactionList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Reaction"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Reaction"
    Reference:
      description: Reference
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Reference"
        text/html:
          schema:
            $ref: "#/components/schemas/Reference"
    ReferenceList:
      description: ReferenceList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Reference"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Reference"
    Release:
      description: Release
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Release"
        text/html:
          schema:
            $ref: "#/components/schemas/Release"
    ReleaseList:
      description: ReleaseList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Release"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Release"
    Repository:
      description: Repository
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Repository"
        text/html:
          schema:
            $ref: "#/components/schemas/Repository"
    RepositoryList:
      description: RepositoryList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Repository"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Repository"
    SearchResults:
      description: SearchResults
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SearchResults"
        text/html:
          schema:
            $ref: "#/components/schemas/SearchResults"
    ServerVersion:
      description: ServerVersion
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ServerVersion"
        text/html:
          schema:
            $ref: "#/components/schemas/ServerVersion"
    StopWatch:
      description: StopWatch
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/StopWatch"
        text/html:
          schema:
            $ref: "#/components/schemas/StopWatch"
    StopWatchList:
      description: StopWatchList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/StopWatch"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/StopWatch"
    StringSlice:
      description: StringSlice
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
        text/html:
          schema:
            type: array
            items:
              type: string
    Tag:
      description: Tag
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Tag"
        text/html:
          schema:
            $ref: "#/components/schemas/Tag"
    TagList:
      description: TagList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Tag"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Tag"
    Team:
      description: Team
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Team"
        text/html:
          schema:
            $ref: "#/components/schemas/Team"
    TeamList:
      description: TeamList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Team"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Team"
    TopicListResponse:
      description: TopicListResponse
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TopicResponse"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TopicResponse"
    TopicNames:
      description: TopicNames
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TopicName"
        text/html:
          schema:
            $ref: "#/components/schemas/TopicName"
    TrackedTime:
      description: TrackedTime
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TrackedTime"
        text/html:
          schema:
            $ref: "#/components/schemas/TrackedTime"
    TrackedTimeList:
      description: TrackedTimeList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TrackedTime"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TrackedTime"
    User:
      description: User
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
        text/html:
          schema:
            $ref: "#/components/schemas/User"
    UserHeatmapData:
      description: UserHeatmapData
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/UserHeatmapData"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/UserHeatmapData"
    UserList:
      description: UserList
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
    UserSettings:
      description: UserSettings
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/UserSettings"
        text/html:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/UserSettings"
    WatchInfo:
      description: WatchInfo
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WatchInfo"
        text/html:
          schema:
            $ref: "#/components/schemas/WatchInfo"
    conflict:
      description: APIConflict is a conflict empty response
    empty:
      description: APIEmpty is an empty response
    error:
      description: APIError is error format response
      headers:
        message:
          schema:
            type: string
        url:
          schema:
            type: string
    forbidden:
      description: APIForbiddenError is a forbidden error response
      headers:
        message:
          schema:
            type: string
        url:
          schema:
            type: string
    invalidTopicsError:
      description: APIInvalidTopicsError is error format response to invalid topics
      headers:
        invalidTopics:
          schema:
            type: array
            items:
              type: string
        message:
          schema:
            type: string
    notFound:
      description: APINotFound is a not found empty response
    parameterBodies:
      description: parameterBodies
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserSettingsOptions"
        text/html:
          schema:
            $ref: "#/components/schemas/UserSettingsOptions"
    redirect:
      description: APIRedirect is a redirect response
    string:
      description: APIString is a string response
      content:
        application/json:
          schema:
            type: string
        text/html:
          schema:
            type: string
    validationError:
      description: APIValidationError is error format response related to input validation
      headers:
        message:
          schema:
            type: string
        url:
          schema:
            type: string
  requestBodies:
    CreateOAuth2ApplicationOptions:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateOAuth2ApplicationOptions"
        text/plain:
          schema:
            $ref: "#/components/schemas/CreateOAuth2ApplicationOptions"
      required: true
    EditLabelOption:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EditLabelOption"
    CreateKeyOption:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateKeyOption"
    CreateOrgOption:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateOrgOption"
      required: true
    IssueLabelsOption:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/IssueLabelsOption"
    EditReactionOption:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EditReactionOption"
    CreateRepoOption:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateRepoOption"
    CreateLabelOption:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateLabelOption"
    EditIssueCommentOption:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EditIssueCommentOption"
    PullReviewRequestOptions:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PullReviewRequestOptions"
        text/plain:
          schema:
            $ref: "#/components/schemas/PullReviewRequestOptions"
      required: true
  securitySchemes:
    AccessToken:
      type: apiKey
      name: access_token
      in: query
    AuthorizationHeaderToken:
      description: API tokens must be prepended with "token" followed by a space.
      type: apiKey
      name: Authorization
      in: header
    BasicAuth:
      type: http
      scheme: basic
    SudoHeader:
      description: Sudo API request as the user provided as the key. Admin privileges are
        required.
      type: apiKey
      name: Sudo
      in: header
    SudoParam:
      description: Sudo API request as the user provided as the key. Admin privileges are
        required.
      type: apiKey
      name: sudo
      in: query
    TOTPHeader:
      description: Must be used in combination with BasicAuth if two-factor authentication
        is enabled.
      type: apiKey
      name: X-GITEA-OTP
      in: header
    Token:
      type: apiKey
      name: token
      in: query
  schemas:
    APIError:
      description: APIError is an api error with a message
      type: object
      properties:
        message:
          type: string
          x-go-name: Message
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    AccessToken:
      type: object
      title: AccessToken represents an API access token.
      properties:
        id:
          type: integer
          format: int64
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        sha1:
          type: string
          x-go-name: Token
        token_last_eight:
          type: string
          x-go-name: TokenLastEight
      x-go-package: code.gitea.io/gitea/modules/structs
    AddCollaboratorOption:
      description: AddCollaboratorOption options when adding a user as a collaborator of a
        repository
      type: object
      properties:
        permission:
          type: string
          x-go-name: Permission
      x-go-package: code.gitea.io/gitea/modules/structs
    AddTimeOption:
      description: AddTimeOption options for adding time to an issue
      type: object
      required:
        - time
      properties:
        created:
          type: string
          format: date-time
          x-go-name: Created
        time:
          description: time in seconds
          type: integer
          format: int64
          x-go-name: Time
        user_name:
          description: User who spent the time (optional)
          type: string
          x-go-name: User
      x-go-package: code.gitea.io/gitea/modules/structs
    AnnotatedTag:
      description: AnnotatedTag represents an annotated tag
      type: object
      properties:
        message:
          type: string
          x-go-name: Message
        object:
          $ref: "#/components/schemas/AnnotatedTagObject"
        sha:
          type: string
          x-go-name: SHA
        tag:
          type: string
          x-go-name: Tag
        tagger:
          $ref: "#/components/schemas/CommitUser"
        url:
          type: string
          x-go-name: URL
        verification:
          $ref: "#/components/schemas/PayloadCommitVerification"
      x-go-package: code.gitea.io/gitea/modules/structs
    AnnotatedTagObject:
      description: AnnotatedTagObject contains meta information of the tag object
      type: object
      properties:
        sha:
          type: string
          x-go-name: SHA
        type:
          type: string
          x-go-name: Type
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    Attachment:
      description: Attachment a generic attachment
      type: object
      properties:
        browser_download_url:
          type: string
          x-go-name: DownloadURL
        created_at:
          type: string
          format: date-time
          x-go-name: Created
        download_count:
          type: integer
          format: int64
          x-go-name: DownloadCount
        id:
          type: integer
          format: int64
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        size:
          type: integer
          format: int64
          x-go-name: Size
        uuid:
          type: string
          x-go-name: UUID
      x-go-package: code.gitea.io/gitea/modules/structs
    Branch:
      description: Branch represents a repository branch
      type: object
      properties:
        commit:
          $ref: "#/components/schemas/PayloadCommit"
        effective_branch_protection_name:
          type: string
          x-go-name: EffectiveBranchProtectionName
        enable_status_check:
          type: boolean
          x-go-name: EnableStatusCheck
        name:
          type: string
          x-go-name: Name
        protected:
          type: boolean
          x-go-name: Protected
        required_approvals:
          type: integer
          format: int64
          x-go-name: RequiredApprovals
        status_check_contexts:
          type: array
          items:
            type: string
          x-go-name: StatusCheckContexts
        user_can_merge:
          type: boolean
          x-go-name: UserCanMerge
        user_can_push:
          type: boolean
          x-go-name: UserCanPush
      x-go-package: code.gitea.io/gitea/modules/structs
    BranchProtection:
      description: BranchProtection represents a branch protection for a repository
      type: object
      properties:
        approvals_whitelist_teams:
          type: array
          items:
            type: string
          x-go-name: ApprovalsWhitelistTeams
        approvals_whitelist_username:
          type: array
          items:
            type: string
          x-go-name: ApprovalsWhitelistUsernames
        block_on_official_review_requests:
          type: boolean
          x-go-name: BlockOnOfficialReviewRequests
        block_on_outdated_branch:
          type: boolean
          x-go-name: BlockOnOutdatedBranch
        block_on_rejected_reviews:
          type: boolean
          x-go-name: BlockOnRejectedReviews
        branch_name:
          type: string
          x-go-name: BranchName
        created_at:
          type: string
          format: date-time
          x-go-name: Created
        dismiss_stale_approvals:
          type: boolean
          x-go-name: DismissStaleApprovals
        enable_approvals_whitelist:
          type: boolean
          x-go-name: EnableApprovalsWhitelist
        enable_merge_whitelist:
          type: boolean
          x-go-name: EnableMergeWhitelist
        enable_push:
          type: boolean
          x-go-name: EnablePush
        enable_push_whitelist:
          type: boolean
          x-go-name: EnablePushWhitelist
        enable_status_check:
          type: boolean
          x-go-name: EnableStatusCheck
        merge_whitelist_teams:
          type: array
          items:
            type: string
          x-go-name: MergeWhitelistTeams
        merge_whitelist_usernames:
          type: array
          items:
            type: string
          x-go-name: MergeWhitelistUsernames
        protected_file_patterns:
          type: string
          x-go-name: ProtectedFilePatterns
        push_whitelist_deploy_keys:
          type: boolean
          x-go-name: PushWhitelistDeployKeys
        push_whitelist_teams:
          type: array
          items:
            type: string
          x-go-name: PushWhitelistTeams
        push_whitelist_usernames:
          type: array
          items:
            type: string
          x-go-name: PushWhitelistUsernames
        require_signed_commits:
          type: boolean
          x-go-name: RequireSignedCommits
        required_approvals:
          type: integer
          format: int64
          x-go-name: RequiredApprovals
        status_check_contexts:
          type: array
          items:
            type: string
          x-go-name: StatusCheckContexts
        updated_at:
          type: string
          format: date-time
          x-go-name: Updated
      x-go-package: code.gitea.io/gitea/modules/structs
    CombinedStatus:
      description: CombinedStatus holds the combined state of several statuses for a single
        commit
      type: object
      properties:
        commit_url:
          type: string
          x-go-name: CommitURL
        repository:
          $ref: "#/components/schemas/Repository"
        sha:
          type: string
          x-go-name: SHA
        state:
          $ref: "#/components/schemas/CommitStatusState"
        statuses:
          type: array
          items:
            $ref: "#/components/schemas/CommitStatus"
          x-go-name: Statuses
        total_count:
          type: integer
          format: int64
          x-go-name: TotalCount
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    Comment:
      description: Comment represents a comment on a commit or issue
      type: object
      properties:
        body:
          type: string
          x-go-name: Body
        created_at:
          type: string
          format: date-time
          x-go-name: Created
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          type: integer
          format: int64
          x-go-name: ID
        issue_url:
          type: string
          x-go-name: IssueURL
        original_author:
          type: string
          x-go-name: OriginalAuthor
        original_author_id:
          type: integer
          format: int64
          x-go-name: OriginalAuthorID
        pull_request_url:
          type: string
          x-go-name: PRURL
        updated_at:
          type: string
          format: date-time
          x-go-name: Updated
        user:
          $ref: "#/components/schemas/User"
      x-go-package: code.gitea.io/gitea/modules/structs
    Commit:
      type: object
      title: Commit contains information generated from a Git commit.
      properties:
        author:
          $ref: "#/components/schemas/User"
        commit:
          $ref: "#/components/schemas/RepoCommit"
        committer:
          $ref: "#/components/schemas/User"
        created:
          type: string
          format: date-time
          x-go-name: Created
        files:
          type: array
          items:
            $ref: "#/components/schemas/CommitAffectedFiles"
          x-go-name: Files
        html_url:
          type: string
          x-go-name: HTMLURL
        parents:
          type: array
          items:
            $ref: "#/components/schemas/CommitMeta"
          x-go-name: Parents
        sha:
          type: string
          x-go-name: SHA
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    CommitAffectedFiles:
      description: CommitAffectedFiles store information about files affected by the commit
      type: object
      properties:
        filename:
          type: string
          x-go-name: Filename
      x-go-package: code.gitea.io/gitea/modules/structs
    CommitDateOptions:
      description: CommitDateOptions store dates for GIT_AUTHOR_DATE and GIT_COMMITTER_DATE
      type: object
      properties:
        author:
          type: string
          format: date-time
          x-go-name: Author
        committer:
          type: string
          format: date-time
          x-go-name: Committer
      x-go-package: code.gitea.io/gitea/modules/structs
    CommitMeta:
      type: object
      title: CommitMeta contains meta information of a commit in terms of API.
      properties:
        created:
          type: string
          format: date-time
          x-go-name: Created
        sha:
          type: string
          x-go-name: SHA
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    CommitStatus:
      description: CommitStatus holds a single status of a single Commit
      type: object
      properties:
        context:
          type: string
          x-go-name: Context
        created_at:
          type: string
          format: date-time
          x-go-name: Created
        creator:
          $ref: "#/components/schemas/User"
        description:
          type: string
          x-go-name: Description
        id:
          type: integer
          format: int64
          x-go-name: ID
        status:
          $ref: "#/components/schemas/CommitStatusState"
        target_url:
          type: string
          x-go-name: TargetURL
        updated_at:
          type: string
          format: date-time
          x-go-name: Updated
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    CommitStatusState:
      description: |-
        CommitStatusState holds the state of a CommitStatus
        It can be "pending", "success", "error", "failure", and "warning"
      type: string
      x-go-package: code.gitea.io/gitea/modules/structs
    CommitUser:
      type: object
      title: CommitUser contains information of a user in the context of a commit.
      properties:
        date:
          type: string
          x-go-name: Date
        email:
          type: string
          format: email
          x-go-name: Email
        name:
          type: string
          x-go-name: Name
      x-go-package: code.gitea.io/gitea/modules/structs
    ContentsResponse:
      description: ContentsResponse contains information about a repo's entry's (dir, file,
        symlink, submodule) metadata and content
      type: object
      properties:
        _links:
          $ref: "#/components/schemas/FileLinksResponse"
        content:
          description: "`content` is populated when `type` is `file`, otherwise null"
          type: string
          x-go-name: Content
        download_url:
          type: string
          x-go-name: DownloadURL
        encoding:
          description: "`encoding` is populated when `type` is `file`, otherwise null"
          type: string
          x-go-name: Encoding
        git_url:
          type: string
          x-go-name: GitURL
        html_url:
          type: string
          x-go-name: HTMLURL
        name:
          type: string
          x-go-name: Name
        path:
          type: string
          x-go-name: Path
        sha:
          type: string
          x-go-name: SHA
        size:
          type: integer
          format: int64
          x-go-name: Size
        submodule_git_url:
          description: "`submodule_git_url` is populated when `type` is `submodule`,
            otherwise null"
          type: string
          x-go-name: SubmoduleGitURL
        target:
          description: "`target` is populated when `type` is `symlink`, otherwise null"
          type: string
          x-go-name: Target
        type:
          description: "`type` will be `file`, `dir`, `symlink`, or `submodule`"
          type: string
          x-go-name: Type
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateAccessTokenOption:
      description: CreateAccessTokenOption options when create access token
      type: object
      properties:
        name:
          type: string
          x-go-name: Name
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateBranchProtectionOption:
      description: CreateBranchProtectionOption options for creating a branch protection
      type: object
      properties:
        approvals_whitelist_teams:
          type: array
          items:
            type: string
          x-go-name: ApprovalsWhitelistTeams
        approvals_whitelist_username:
          type: array
          items:
            type: string
          x-go-name: ApprovalsWhitelistUsernames
        block_on_official_review_requests:
          type: boolean
          x-go-name: BlockOnOfficialReviewRequests
        block_on_outdated_branch:
          type: boolean
          x-go-name: BlockOnOutdatedBranch
        block_on_rejected_reviews:
          type: boolean
          x-go-name: BlockOnRejectedReviews
        branch_name:
          type: string
          x-go-name: BranchName
        dismiss_stale_approvals:
          type: boolean
          x-go-name: DismissStaleApprovals
        enable_approvals_whitelist:
          type: boolean
          x-go-name: EnableApprovalsWhitelist
        enable_merge_whitelist:
          type: boolean
          x-go-name: EnableMergeWhitelist
        enable_push:
          type: boolean
          x-go-name: EnablePush
        enable_push_whitelist:
          type: boolean
          x-go-name: EnablePushWhitelist
        enable_status_check:
          type: boolean
          x-go-name: EnableStatusCheck
        merge_whitelist_teams:
          type: array
          items:
            type: string
          x-go-name: MergeWhitelistTeams
        merge_whitelist_usernames:
          type: array
          items:
            type: string
          x-go-name: MergeWhitelistUsernames
        protected_file_patterns:
          type: string
          x-go-name: ProtectedFilePatterns
        push_whitelist_deploy_keys:
          type: boolean
          x-go-name: PushWhitelistDeployKeys
        push_whitelist_teams:
          type: array
          items:
            type: string
          x-go-name: PushWhitelistTeams
        push_whitelist_usernames:
          type: array
          items:
            type: string
          x-go-name: PushWhitelistUsernames
        require_signed_commits:
          type: boolean
          x-go-name: RequireSignedCommits
        required_approvals:
          type: integer
          format: int64
          x-go-name: RequiredApprovals
        status_check_contexts:
          type: array
          items:
            type: string
          x-go-name: StatusCheckContexts
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateBranchRepoOption:
      description: CreateBranchRepoOption options when creating a branch in a repository
      type: object
      required:
        - new_branch_name
      properties:
        new_branch_name:
          description: Name of the branch to create
          type: string
          uniqueItems: true
          x-go-name: BranchName
        old_branch_name:
          description: Name of the old branch to create from
          type: string
          uniqueItems: true
          x-go-name: OldBranchName
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateEmailOption:
      description: CreateEmailOption options when creating email addresses
      type: object
      properties:
        emails:
          description: email addresses to add
          type: array
          items:
            type: string
          x-go-name: Emails
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateFileOptions:
      description: >-
        CreateFileOptions options for creating files

        Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
      type: object
      required:
        - content
      properties:
        author:
          $ref: "#/components/schemas/Identity"
        branch:
          description: branch (optional) to base this file from. if not given, the default
            branch is used
          type: string
          x-go-name: BranchName
        committer:
          $ref: "#/components/schemas/Identity"
        content:
          description: content must be base64 encoded
          type: string
          x-go-name: Content
        dates:
          $ref: "#/components/schemas/CommitDateOptions"
        message:
          description: message (optional) for the commit of this file. if not supplied, a
            default message will be used
          type: string
          x-go-name: Message
        new_branch:
          description: new_branch (optional) will make a new branch from `branch` before
            creating the file
          type: string
          x-go-name: NewBranchName
        signoff:
          description: Add a Signed-off-by trailer by the committer at the end of the
            commit log message.
          type: boolean
          x-go-name: Signoff
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateForkOption:
      description: CreateForkOption options for creating a fork
      type: object
      properties:
        organization:
          description: organization name, if forking into an organization
          type: string
          x-go-name: Organization
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateGPGKeyOption:
      description: CreateGPGKeyOption options create user GPG key
      type: object
      required:
        - armored_public_key
      properties:
        armored_public_key:
          description: An armored GPG key to add
          type: string
          uniqueItems: true
          x-go-name: ArmoredKey
        armored_signature:
          type: string
          x-go-name: Signature
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateHookOption:
      description: CreateHookOption options when create a hook
      type: object
      required:
        - type
        - config
      properties:
        active:
          type: boolean
          default: false
          x-go-name: Active
        branch_filter:
          type: string
          x-go-name: BranchFilter
        config:
          $ref: "#/components/schemas/CreateHookOptionConfig"
        events:
          type: array
          items:
            type: string
          x-go-name: Events
        type:
          type: string
          enum:
            - dingtalk
            - discord
            - gitea
            - gogs
            - msteams
            - slack
            - telegram
            - feishu
            - wechatwork
          x-go-name: Type
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateHookOptionConfig:
      description: |-
        CreateHookOptionConfig has all config options in it
        required are "content_type" and "url" Required
      type: object
      additionalProperties:
        type: string
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateIssueCommentOption:
      description: CreateIssueCommentOption options for creating a comment on an issue
      type: object
      required:
        - body
      properties:
        body:
          type: string
          x-go-name: Body
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateIssueOption:
      description: CreateIssueOption options to create one issue
      type: object
      required:
        - title
      properties:
        assignee:
          description: deprecated
          type: string
          x-go-name: Assignee
        assignees:
          type: array
          items:
            type: string
          x-go-name: Assignees
        body:
          type: string
          x-go-name: Body
        closed:
          type: boolean
          x-go-name: Closed
        due_date:
          type: string
          format: date-time
          x-go-name: Deadline
        labels:
          description: list of label ids
          type: array
          items:
            type: integer
            format: int64
          x-go-name: Labels
        milestone:
          description: milestone id
          type: integer
          format: int64
          x-go-name: Milestone
        ref:
          type: string
          x-go-name: Ref
        title:
          type: string
          x-go-name: Title
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateKeyOption:
      description: CreateKeyOption options when creating a key
      type: object
      required:
        - title
        - key
      properties:
        key:
          description: An armored SSH key to add
          type: string
          uniqueItems: true
          x-go-name: Key
        read_only:
          description: Describe if the key has only read access or read/write
          type: boolean
          x-go-name: ReadOnly
        title:
          description: Title of the key to add
          type: string
          uniqueItems: true
          x-go-name: Title
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateLabelOption:
      description: CreateLabelOption options for creating a label
      type: object
      required:
        - name
        - color
      properties:
        color:
          type: string
          x-go-name: Color
          example: "#00aabb"
        description:
          type: string
          x-go-name: Description
        name:
          type: string
          x-go-name: Name
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateMilestoneOption:
      description: CreateMilestoneOption options for creating a milestone
      type: object
      properties:
        description:
          type: string
          x-go-name: Description
        due_on:
          type: string
          format: date-time
          x-go-name: Deadline
        state:
          type: string
          enum:
            - open
            - closed
          x-go-name: State
        title:
          type: string
          x-go-name: Title
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateOAuth2ApplicationOptions:
      description: CreateOAuth2ApplicationOptions holds options to create an oauth2
        application
      type: object
      properties:
        name:
          type: string
          x-go-name: Name
        redirect_uris:
          type: array
          items:
            type: string
          x-go-name: RedirectURIs
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateOrgOption:
      description: CreateOrgOption options for creating an organization
      type: object
      required:
        - username
      properties:
        description:
          type: string
          x-go-name: Description
        full_name:
          type: string
          x-go-name: FullName
        location:
          type: string
          x-go-name: Location
        repo_admin_change_team_access:
          type: boolean
          x-go-name: RepoAdminChangeTeamAccess
        username:
          type: string
          x-go-name: UserName
        visibility:
          description: possible values are `public` (default), `limited` or `private`
          type: string
          enum:
            - public
            - limited
            - private
          x-go-name: Visibility
        website:
          type: string
          x-go-name: Website
      x-go-package: code.gitea.io/gitea/modules/structs
    CreatePullRequestOption:
      description: CreatePullRequestOption options when creating a pull request
      type: object
      properties:
        assignee:
          type: string
          x-go-name: Assignee
        assignees:
          type: array
          items:
            type: string
          x-go-name: Assignees
        base:
          type: string
          x-go-name: Base
        body:
          type: string
          x-go-name: Body
        due_date:
          type: string
          format: date-time
          x-go-name: Deadline
        head:
          type: string
          x-go-name: Head
        labels:
          type: array
          items:
            type: integer
            format: int64
          x-go-name: Labels
        milestone:
          type: integer
          format: int64
          x-go-name: Milestone
        title:
          type: string
          x-go-name: Title
      x-go-package: code.gitea.io/gitea/modules/structs
    CreatePullReviewComment:
      description: CreatePullReviewComment represent a review comment for creation api
      type: object
      properties:
        body:
          type: string
          x-go-name: Body
        new_position:
          description: if comment to new file line or 0
          type: integer
          format: int64
          x-go-name: NewLineNum
        old_position:
          description: if comment to old file line or 0
          type: integer
          format: int64
          x-go-name: OldLineNum
        path:
          description: the tree path
          type: string
          x-go-name: Path
      x-go-package: code.gitea.io/gitea/modules/structs
    CreatePullReviewOptions:
      description: CreatePullReviewOptions are options to create a pull review
      type: object
      properties:
        body:
          type: string
          x-go-name: Body
        comments:
          type: array
          items:
            $ref: "#/components/schemas/CreatePullReviewComment"
          x-go-name: Comments
        commit_id:
          type: string
          x-go-name: CommitID
        event:
          $ref: "#/components/schemas/ReviewStateType"
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateReleaseOption:
      description: CreateReleaseOption options when creating a release
      type: object
      required:
        - tag_name
      properties:
        body:
          type: string
          x-go-name: Note
        draft:
          type: boolean
          x-go-name: IsDraft
        name:
          type: string
          x-go-name: Title
        prerelease:
          type: boolean
          x-go-name: IsPrerelease
        tag_name:
          type: string
          x-go-name: TagName
        target_commitish:
          type: string
          x-go-name: Target
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateRepoOption:
      description: CreateRepoOption options when creating repository
      type: object
      required:
        - name
      properties:
        auto_init:
          description: Whether the repository should be auto-intialized?
          type: boolean
          x-go-name: AutoInit
        default_branch:
          description: DefaultBranch of the repository (used when initializes and in
            template)
          type: string
          x-go-name: DefaultBranch
        description:
          description: Description of the repository to create
          type: string
          x-go-name: Description
        gitignores:
          description: Gitignores to use
          type: string
          x-go-name: Gitignores
        issue_labels:
          description: Label-Set to use
          type: string
          x-go-name: IssueLabels
        license:
          description: License to use
          type: string
          x-go-name: License
        name:
          description: Name of the repository to create
          type: string
          uniqueItems: true
          x-go-name: Name
        private:
          description: Whether the repository is private
          type: boolean
          x-go-name: Private
        readme:
          description: Readme of the repository to create
          type: string
          x-go-name: Readme
        template:
          description: Whether the repository is template
          type: boolean
          x-go-name: Template
        trust_model:
          description: TrustModel of the repository
          type: string
          enum:
            - default
            - collaborator
            - committer
            - collaboratorcommitter
          x-go-name: TrustModel
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateStatusOption:
      description: CreateStatusOption holds the information needed to create a new
        CommitStatus for a Commit
      type: object
      properties:
        context:
          type: string
          x-go-name: Context
        description:
          type: string
          x-go-name: Description
        state:
          $ref: "#/components/schemas/CommitStatusState"
        target_url:
          type: string
          x-go-name: TargetURL
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateTagOption:
      description: CreateTagOption options when creating a tag
      type: object
      required:
        - tag_name
      properties:
        message:
          type: string
          x-go-name: Message
        tag_name:
          type: string
          x-go-name: TagName
        target:
          type: string
          x-go-name: Target
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateTeamOption:
      description: CreateTeamOption options for creating a team
      type: object
      required:
        - name
      properties:
        can_create_org_repo:
          type: boolean
          x-go-name: CanCreateOrgRepo
        description:
          type: string
          x-go-name: Description
        includes_all_repositories:
          type: boolean
          x-go-name: IncludesAllRepositories
        name:
          type: string
          x-go-name: Name
        permission:
          type: string
          enum:
            - read
            - write
            - admin
          x-go-name: Permission
        units:
          type: array
          items:
            type: string
          x-go-name: Units
          example:
            - repo.code
            - repo.issues
            - repo.ext_issues
            - repo.wiki
            - repo.pulls
            - repo.releases
            - repo.projects
            - repo.ext_wiki
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateUserOption:
      description: CreateUserOption create user options
      type: object
      required:
        - username
        - email
        - password
      properties:
        email:
          type: string
          format: email
          x-go-name: Email
        full_name:
          type: string
          x-go-name: FullName
        login_name:
          type: string
          x-go-name: LoginName
        must_change_password:
          type: boolean
          x-go-name: MustChangePassword
        password:
          type: string
          x-go-name: Password
        send_notify:
          type: boolean
          x-go-name: SendNotify
        source_id:
          type: integer
          format: int64
          x-go-name: SourceID
        username:
          type: string
          x-go-name: Username
        visibility:
          type: string
          x-go-name: Visibility
      x-go-package: code.gitea.io/gitea/modules/structs
    Cron:
      description: Cron represents a Cron task
      type: object
      properties:
        exec_times:
          type: integer
          format: int64
          x-go-name: ExecTimes
        name:
          type: string
          x-go-name: Name
        next:
          type: string
          format: date-time
          x-go-name: Next
        prev:
          type: string
          format: date-time
          x-go-name: Prev
        schedule:
          type: string
          x-go-name: Schedule
      x-go-package: code.gitea.io/gitea/modules/structs
    DeleteEmailOption:
      description: DeleteEmailOption options when deleting email addresses
      type: object
      properties:
        emails:
          description: email addresses to delete
          type: array
          items:
            type: string
          x-go-name: Emails
      x-go-package: code.gitea.io/gitea/modules/structs
    DeleteFileOptions:
      description: >-
        DeleteFileOptions options for deleting files (used for other File
        structs below)

        Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
      type: object
      required:
        - sha
      properties:
        author:
          $ref: "#/components/schemas/Identity"
        branch:
          description: branch (optional) to base this file from. if not given, the default
            branch is used
          type: string
          x-go-name: BranchName
        committer:
          $ref: "#/components/schemas/Identity"
        dates:
          $ref: "#/components/schemas/CommitDateOptions"
        message:
          description: message (optional) for the commit of this file. if not supplied, a
            default message will be used
          type: string
          x-go-name: Message
        new_branch:
          description: new_branch (optional) will make a new branch from `branch` before
            creating the file
          type: string
          x-go-name: NewBranchName
        sha:
          description: sha is the SHA for the file that already exists
          type: string
          x-go-name: SHA
        signoff:
          description: Add a Signed-off-by trailer by the committer at the end of the
            commit log message.
          type: boolean
          x-go-name: Signoff
      x-go-package: code.gitea.io/gitea/modules/structs
    DeployKey:
      description: DeployKey a deploy key
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          x-go-name: Created
        fingerprint:
          type: string
          x-go-name: Fingerprint
        id:
          type: integer
          format: int64
          x-go-name: ID
        key:
          type: string
          x-go-name: Key
        key_id:
          type: integer
          format: int64
          x-go-name: KeyID
        read_only:
          type: boolean
          x-go-name: ReadOnly
        repository:
          $ref: "#/components/schemas/Repository"
        title:
          type: string
          x-go-name: Title
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    DismissPullReviewOptions:
      description: DismissPullReviewOptions are options to dismiss a pull review
      type: object
      properties:
        message:
          type: string
          x-go-name: Message
      x-go-package: code.gitea.io/gitea/modules/structs
    EditAttachmentOptions:
      description: EditAttachmentOptions options for editing attachments
      type: object
      properties:
        name:
          type: string
          x-go-name: Name
      x-go-package: code.gitea.io/gitea/modules/structs
    EditBranchProtectionOption:
      description: EditBranchProtectionOption options for editing a branch protection
      type: object
      properties:
        approvals_whitelist_teams:
          type: array
          items:
            type: string
          x-go-name: ApprovalsWhitelistTeams
        approvals_whitelist_username:
          type: array
          items:
            type: string
          x-go-name: ApprovalsWhitelistUsernames
        block_on_official_review_requests:
          type: boolean
          x-go-name: BlockOnOfficialReviewRequests
        block_on_outdated_branch:
          type: boolean
          x-go-name: BlockOnOutdatedBranch
        block_on_rejected_reviews:
          type: boolean
          x-go-name: BlockOnRejectedReviews
        dismiss_stale_approvals:
          type: boolean
          x-go-name: DismissStaleApprovals
        enable_approvals_whitelist:
          type: boolean
          x-go-name: EnableApprovalsWhitelist
        enable_merge_whitelist:
          type: boolean
          x-go-name: EnableMergeWhitelist
        enable_push:
          type: boolean
          x-go-name: EnablePush
        enable_push_whitelist:
          type: boolean
          x-go-name: EnablePushWhitelist
        enable_status_check:
          type: boolean
          x-go-name: EnableStatusCheck
        merge_whitelist_teams:
          type: array
          items:
            type: string
          x-go-name: MergeWhitelistTeams
        merge_whitelist_usernames:
          type: array
          items:
            type: string
          x-go-name: MergeWhitelistUsernames
        protected_file_patterns:
          type: string
          x-go-name: ProtectedFilePatterns
        push_whitelist_deploy_keys:
          type: boolean
          x-go-name: PushWhitelistDeployKeys
        push_whitelist_teams:
          type: array
          items:
            type: string
          x-go-name: PushWhitelistTeams
        push_whitelist_usernames:
          type: array
          items:
            type: string
          x-go-name: PushWhitelistUsernames
        require_signed_commits:
          type: boolean
          x-go-name: RequireSignedCommits
        required_approvals:
          type: integer
          format: int64
          x-go-name: RequiredApprovals
        status_check_contexts:
          type: array
          items:
            type: string
          x-go-name: StatusCheckContexts
      x-go-package: code.gitea.io/gitea/modules/structs
    EditDeadlineOption:
      description: EditDeadlineOption options for creating a deadline
      type: object
      required:
        - due_date
      properties:
        due_date:
          type: string
          format: date-time
          x-go-name: Deadline
      x-go-package: code.gitea.io/gitea/modules/structs
    EditGitHookOption:
      description: EditGitHookOption options when modifying one Git hook
      type: object
      properties:
        content:
          type: string
          x-go-name: Content
      x-go-package: code.gitea.io/gitea/modules/structs
    EditHookOption:
      description: EditHookOption options when modify one hook
      type: object
      properties:
        active:
          type: boolean
          x-go-name: Active
        branch_filter:
          type: string
          x-go-name: BranchFilter
        config:
          type: object
          additionalProperties:
            type: string
          x-go-name: Config
        events:
          type: array
          items:
            type: string
          x-go-name: Events
      x-go-package: code.gitea.io/gitea/modules/structs
    EditIssueCommentOption:
      description: EditIssueCommentOption options for editing a comment
      type: object
      required:
        - body
      properties:
        body:
          type: string
          x-go-name: Body
      x-go-package: code.gitea.io/gitea/modules/structs
    EditIssueOption:
      description: EditIssueOption options for editing an issue
      type: object
      properties:
        assignee:
          description: deprecated
          type: string
          x-go-name: Assignee
        assignees:
          type: array
          items:
            type: string
          x-go-name: Assignees
        body:
          type: string
          x-go-name: Body
        due_date:
          type: string
          format: date-time
          x-go-name: Deadline
        milestone:
          type: integer
          format: int64
          x-go-name: Milestone
        ref:
          type: string
          x-go-name: Ref
        state:
          type: string
          x-go-name: State
        title:
          type: string
          x-go-name: Title
        unset_due_date:
          type: boolean
          x-go-name: RemoveDeadline
      x-go-package: code.gitea.io/gitea/modules/structs
    EditLabelOption:
      description: EditLabelOption options for editing a label
      type: object
      properties:
        color:
          type: string
          x-go-name: Color
        description:
          type: string
          x-go-name: Description
        name:
          type: string
          x-go-name: Name
      x-go-package: code.gitea.io/gitea/modules/structs
    EditMilestoneOption:
      description: EditMilestoneOption options for editing a milestone
      type: object
      properties:
        description:
          type: string
          x-go-name: Description
        due_on:
          type: string
          format: date-time
          x-go-name: Deadline
        state:
          type: string
          x-go-name: State
        title:
          type: string
          x-go-name: Title
      x-go-package: code.gitea.io/gitea/modules/structs
    EditOrgOption:
      description: EditOrgOption options for editing an organization
      type: object
      properties:
        description:
          type: string
          x-go-name: Description
        full_name:
          type: string
          x-go-name: FullName
        location:
          type: string
          x-go-name: Location
        repo_admin_change_team_access:
          type: boolean
          x-go-name: RepoAdminChangeTeamAccess
        visibility:
          description: possible values are `public`, `limited` or `private`
          type: string
          enum:
            - public
            - limited
            - private
          x-go-name: Visibility
        website:
          type: string
          x-go-name: Website
      x-go-package: code.gitea.io/gitea/modules/structs
    EditPullRequestOption:
      description: EditPullRequestOption options when modify pull request
      type: object
      properties:
        assignee:
          type: string
          x-go-name: Assignee
        assignees:
          type: array
          items:
            type: string
          x-go-name: Assignees
        base:
          type: string
          x-go-name: Base
        body:
          type: string
          x-go-name: Body
        due_date:
          type: string
          format: date-time
          x-go-name: Deadline
        labels:
          type: array
          items:
            type: integer
            format: int64
          x-go-name: Labels
        milestone:
          type: integer
          format: int64
          x-go-name: Milestone
        state:
          type: string
          x-go-name: State
        title:
          type: string
          x-go-name: Title
        unset_due_date:
          type: boolean
          x-go-name: RemoveDeadline
      x-go-package: code.gitea.io/gitea/modules/structs
    EditReactionOption:
      description: EditReactionOption contain the reaction type
      type: object
      properties:
        content:
          type: string
          x-go-name: Reaction
      x-go-package: code.gitea.io/gitea/modules/structs
    EditReleaseOption:
      description: EditReleaseOption options when editing a release
      type: object
      properties:
        body:
          type: string
          x-go-name: Note
        draft:
          type: boolean
          x-go-name: IsDraft
        name:
          type: string
          x-go-name: Title
        prerelease:
          type: boolean
          x-go-name: IsPrerelease
        tag_name:
          type: string
          x-go-name: TagName
        target_commitish:
          type: string
          x-go-name: Target
      x-go-package: code.gitea.io/gitea/modules/structs
    EditRepoOption:
      description: EditRepoOption options when editing a repository's properties
      type: object
      properties:
        allow_manual_merge:
          description: either `true` to allow mark pr as merged manually, or `false` to
            prevent it. `has_pull_requests` must be `true`.
          type: boolean
          x-go-name: AllowManualMerge
        allow_merge_commits:
          description: either `true` to allow merging pull requests with a merge commit, or
            `false` to prevent merging pull requests with merge commits.
            `has_pull_requests` must be `true`.
          type: boolean
          x-go-name: AllowMerge
        allow_rebase:
          description: either `true` to allow rebase-merging pull requests, or `false` to
            prevent rebase-merging. `has_pull_requests` must be `true`.
          type: boolean
          x-go-name: AllowRebase
        allow_rebase_explicit:
          description: either `true` to allow rebase with explicit merge commits (--no-ff),
            or `false` to prevent rebase with explicit merge commits.
            `has_pull_requests` must be `true`.
          type: boolean
          x-go-name: AllowRebaseMerge
        allow_squash_merge:
          description: either `true` to allow squash-merging pull requests, or `false` to
            prevent squash-merging. `has_pull_requests` must be `true`.
          type: boolean
          x-go-name: AllowSquash
        archived:
          description: set to `true` to archive this repository.
          type: boolean
          x-go-name: Archived
        autodetect_manual_merge:
          description: "either `true` to enable AutodetectManualMerge, or `false` to
            prevent it. `has_pull_requests` must be `true`, Note: In some
            special cases, misjudgments can occur."
          type: boolean
          x-go-name: AutodetectManualMerge
        default_branch:
          description: sets the default branch for this repository.
          type: string
          x-go-name: DefaultBranch
        default_delete_branch_after_merge:
          description: set to `true` to delete pr branch after merge by default
          type: boolean
          x-go-name: DefaultDeleteBranchAfterMerge
        default_merge_style:
          description: 'set to a merge style to be used by this repository: "merge",
            "rebase", "rebase-merge", or "squash". `has_pull_requests` must be
            `true`.'
          type: string
          x-go-name: DefaultMergeStyle
        description:
          description: a short description of the repository.
          type: string
          x-go-name: Description
        external_tracker:
          $ref: "#/components/schemas/ExternalTracker"
        external_wiki:
          $ref: "#/components/schemas/ExternalWiki"
        has_issues:
          description: either `true` to enable issues for this repository or `false` to
            disable them.
          type: boolean
          x-go-name: HasIssues
        has_projects:
          description: either `true` to enable project unit, or `false` to disable them.
          type: boolean
          x-go-name: HasProjects
        has_pull_requests:
          description: either `true` to allow pull requests, or `false` to prevent pull
            request.
          type: boolean
          x-go-name: HasPullRequests
        has_wiki:
          description: either `true` to enable the wiki for this repository or `false` to
            disable it.
          type: boolean
          x-go-name: HasWiki
        ignore_whitespace_conflicts:
          description: either `true` to ignore whitespace for conflicts, or `false` to not
            ignore whitespace. `has_pull_requests` must be `true`.
          type: boolean
          x-go-name: IgnoreWhitespaceConflicts
        internal_tracker:
          $ref: "#/components/schemas/InternalTracker"
        mirror_interval:
          description: set to a string like `8h30m0s` to set the mirror interval time
          type: string
          x-go-name: MirrorInterval
        name:
          description: name of the repository
          type: string
          uniqueItems: true
          x-go-name: Name
        private:
          description: >-
            either `true` to make the repository private or `false` to make it
            public.

            Note: you will get a 422 error if the organization restricts changing repository visibility to organization

            owners and a non-owner tries to change the value of private.
          type: boolean
          x-go-name: Private
        template:
          description: either `true` to make this repository a template or `false` to make
            it a normal repository
          type: boolean
          x-go-name: Template
        website:
          description: a URL with more information about the repository.
          type: string
          x-go-name: Website
      x-go-package: code.gitea.io/gitea/modules/structs
    EditTeamOption:
      description: EditTeamOption options for editing a team
      type: object
      required:
        - name
      properties:
        can_create_org_repo:
          type: boolean
          x-go-name: CanCreateOrgRepo
        description:
          type: string
          x-go-name: Description
        includes_all_repositories:
          type: boolean
          x-go-name: IncludesAllRepositories
        name:
          type: string
          x-go-name: Name
        permission:
          type: string
          enum:
            - read
            - write
            - admin
          x-go-name: Permission
        units:
          type: array
          items:
            type: string
          x-go-name: Units
          example:
            - repo.code
            - repo.issues
            - repo.ext_issues
            - repo.wiki
            - repo.pulls
            - repo.releases
            - repo.projects
            - repo.ext_wiki
      x-go-package: code.gitea.io/gitea/modules/structs
    EditUserOption:
      description: EditUserOption edit user options
      type: object
      required:
        - source_id
        - login_name
      properties:
        active:
          type: boolean
          x-go-name: Active
        admin:
          type: boolean
          x-go-name: Admin
        allow_create_organization:
          type: boolean
          x-go-name: AllowCreateOrganization
        allow_git_hook:
          type: boolean
          x-go-name: AllowGitHook
        allow_import_local:
          type: boolean
          x-go-name: AllowImportLocal
        description:
          type: string
          x-go-name: Description
        email:
          type: string
          format: email
          x-go-name: Email
        full_name:
          type: string
          x-go-name: FullName
        location:
          type: string
          x-go-name: Location
        login_name:
          type: string
          x-go-name: LoginName
        max_repo_creation:
          type: integer
          format: int64
          x-go-name: MaxRepoCreation
        must_change_password:
          type: boolean
          x-go-name: MustChangePassword
        password:
          type: string
          x-go-name: Password
        prohibit_login:
          type: boolean
          x-go-name: ProhibitLogin
        restricted:
          type: boolean
          x-go-name: Restricted
        source_id:
          type: integer
          format: int64
          x-go-name: SourceID
        visibility:
          type: string
          x-go-name: Visibility
        website:
          type: string
          x-go-name: Website
      x-go-package: code.gitea.io/gitea/modules/structs
    Email:
      description: Email an email address belonging to a user
      type: object
      properties:
        email:
          type: string
          format: email
          x-go-name: Email
        primary:
          type: boolean
          x-go-name: Primary
        verified:
          type: boolean
          x-go-name: Verified
      x-go-package: code.gitea.io/gitea/modules/structs
    ExternalTracker:
      description: ExternalTracker represents settings for external tracker
      type: object
      properties:
        external_tracker_format:
          description: External Issue Tracker URL Format. Use the placeholders {user},
            {repo} and {index} for the username, repository name and issue
            index.
          type: string
          x-go-name: ExternalTrackerFormat
        external_tracker_style:
          description: External Issue Tracker Number Format, either `numeric` or
            `alphanumeric`
          type: string
          x-go-name: ExternalTrackerStyle
        external_tracker_url:
          description: URL of external issue tracker.
          type: string
          x-go-name: ExternalTrackerURL
      x-go-package: code.gitea.io/gitea/modules/structs
    ExternalWiki:
      description: ExternalWiki represents setting for external wiki
      type: object
      properties:
        external_wiki_url:
          description: URL of external wiki.
          type: string
          x-go-name: ExternalWikiURL
      x-go-package: code.gitea.io/gitea/modules/structs
    FileCommitResponse:
      type: object
      title: FileCommitResponse contains information generated from a Git commit for
        a repo's file.
      properties:
        author:
          $ref: "#/components/schemas/CommitUser"
        committer:
          $ref: "#/components/schemas/CommitUser"
        created:
          type: string
          format: date-time
          x-go-name: Created
        html_url:
          type: string
          x-go-name: HTMLURL
        message:
          type: string
          x-go-name: Message
        parents:
          type: array
          items:
            $ref: "#/components/schemas/CommitMeta"
          x-go-name: Parents
        sha:
          type: string
          x-go-name: SHA
        tree:
          $ref: "#/components/schemas/CommitMeta"
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    FileDeleteResponse:
      description: FileDeleteResponse contains information about a repo's file that was
        deleted
      type: object
      properties:
        commit:
          $ref: "#/components/schemas/FileCommitResponse"
        content:
          type: object
          x-go-name: Content
        verification:
          $ref: "#/components/schemas/PayloadCommitVerification"
      x-go-package: code.gitea.io/gitea/modules/structs
    FileLinksResponse:
      description: FileLinksResponse contains the links for a repo's file
      type: object
      properties:
        git:
          type: string
          x-go-name: GitURL
        html:
          type: string
          x-go-name: HTMLURL
        self:
          type: string
          x-go-name: Self
      x-go-package: code.gitea.io/gitea/modules/structs
    FileResponse:
      description: FileResponse contains information about a repo's file
      type: object
      properties:
        commit:
          $ref: "#/components/schemas/FileCommitResponse"
        content:
          $ref: "#/components/schemas/ContentsResponse"
        verification:
          $ref: "#/components/schemas/PayloadCommitVerification"
      x-go-package: code.gitea.io/gitea/modules/structs
    GPGKey:
      description: GPGKey a user GPG key to sign commit and tag in repository
      type: object
      properties:
        can_certify:
          type: boolean
          x-go-name: CanCertify
        can_encrypt_comms:
          type: boolean
          x-go-name: CanEncryptComms
        can_encrypt_storage:
          type: boolean
          x-go-name: CanEncryptStorage
        can_sign:
          type: boolean
          x-go-name: CanSign
        created_at:
          type: string
          format: date-time
          x-go-name: Created
        emails:
          type: array
          items:
            $ref: "#/components/schemas/GPGKeyEmail"
          x-go-name: Emails
        expires_at:
          type: string
          format: date-time
          x-go-name: Expires
        id:
          type: integer
          format: int64
          x-go-name: ID
        key_id:
          type: string
          x-go-name: KeyID
        primary_key_id:
          type: string
          x-go-name: PrimaryKeyID
        public_key:
          type: string
          x-go-name: PublicKey
        subkeys:
          type: array
          items:
            $ref: "#/components/schemas/GPGKey"
          x-go-name: SubsKey
        verified:
          type: boolean
          x-go-name: Verified
      x-go-package: code.gitea.io/gitea/modules/structs
    GPGKeyEmail:
      description: GPGKeyEmail an email attached to a GPGKey
      type: object
      properties:
        email:
          type: string
          x-go-name: Email
        verified:
          type: boolean
          x-go-name: Verified
      x-go-package: code.gitea.io/gitea/modules/structs
    GeneralAPISettings:
      description: GeneralAPISettings contains global api settings exposed by it
      type: object
      properties:
        default_git_trees_per_page:
          type: integer
          format: int64
          x-go-name: DefaultGitTreesPerPage
        default_max_blob_size:
          type: integer
          format: int64
          x-go-name: DefaultMaxBlobSize
        default_paging_num:
          type: integer
          format: int64
          x-go-name: DefaultPagingNum
        max_response_items:
          type: integer
          format: int64
          x-go-name: MaxResponseItems
      x-go-package: code.gitea.io/gitea/modules/structs
    GeneralAttachmentSettings:
      description: GeneralAttachmentSettings contains global Attachment settings exposed by
        API
      type: object
      properties:
        allowed_types:
          type: string
          x-go-name: AllowedTypes
        enabled:
          type: boolean
          x-go-name: Enabled
        max_files:
          type: integer
          format: int64
          x-go-name: MaxFiles
        max_size:
          type: integer
          format: int64
          x-go-name: MaxSize
      x-go-package: code.gitea.io/gitea/modules/structs
    GeneralRepoSettings:
      description: GeneralRepoSettings contains global repository settings exposed by API
      type: object
      properties:
        http_git_disabled:
          type: boolean
          x-go-name: HTTPGitDisabled
        lfs_disabled:
          type: boolean
          x-go-name: LFSDisabled
        migrations_disabled:
          type: boolean
          x-go-name: MigrationsDisabled
        mirrors_disabled:
          type: boolean
          x-go-name: MirrorsDisabled
        stars_disabled:
          type: boolean
          x-go-name: StarsDisabled
        time_tracking_disabled:
          type: boolean
          x-go-name: TimeTrackingDisabled
      x-go-package: code.gitea.io/gitea/modules/structs
    GeneralUISettings:
      description: GeneralUISettings contains global ui settings exposed by API
      type: object
      properties:
        allowed_reactions:
          type: array
          items:
            type: string
          x-go-name: AllowedReactions
        custom_emojis:
          type: array
          items:
            type: string
          x-go-name: CustomEmojis
        default_theme:
          type: string
          x-go-name: DefaultTheme
      x-go-package: code.gitea.io/gitea/modules/structs
    GenerateRepoOption:
      description: GenerateRepoOption options when creating repository using a template
      type: object
      required:
        - owner
        - name
      properties:
        avatar:
          description: include avatar of the template repo
          type: boolean
          x-go-name: Avatar
        description:
          description: Description of the repository to create
          type: string
          x-go-name: Description
        git_content:
          description: include git content of default branch in template repo
          type: boolean
          x-go-name: GitContent
        git_hooks:
          description: include git hooks in template repo
          type: boolean
          x-go-name: GitHooks
        labels:
          description: include labels in template repo
          type: boolean
          x-go-name: Labels
        name:
          description: Name of the repository to create
          type: string
          uniqueItems: true
          x-go-name: Name
        owner:
          description: The organization or person who will own the new repository
          type: string
          x-go-name: Owner
        private:
          description: Whether the repository is private
          type: boolean
          x-go-name: Private
        topics:
          description: include topics in template repo
          type: boolean
          x-go-name: Topics
        webhooks:
          description: include webhooks in template repo
          type: boolean
          x-go-name: Webhooks
      x-go-package: code.gitea.io/gitea/modules/structs
    GitBlobResponse:
      description: GitBlobResponse represents a git blob
      type: object
      properties:
        content:
          type: string
          x-go-name: Content
        encoding:
          type: string
          x-go-name: Encoding
        sha:
          type: string
          x-go-name: SHA
        size:
          type: integer
          format: int64
          x-go-name: Size
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    GitEntry:
      description: GitEntry represents a git tree
      type: object
      properties:
        mode:
          type: string
          x-go-name: Mode
        path:
          type: string
          x-go-name: Path
        sha:
          type: string
          x-go-name: SHA
        size:
          type: integer
          format: int64
          x-go-name: Size
        type:
          type: string
          x-go-name: Type
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    GitHook:
      description: GitHook represents a Git repository hook
      type: object
      properties:
        content:
          type: string
          x-go-name: Content
        is_active:
          type: boolean
          x-go-name: IsActive
        name:
          type: string
          x-go-name: Name
      x-go-package: code.gitea.io/gitea/modules/structs
    GitObject:
      type: object
      title: GitObject represents a Git object.
      properties:
        sha:
          type: string
          x-go-name: SHA
        type:
          type: string
          x-go-name: Type
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    GitServiceType:
      description: GitServiceType represents a git service
      type: integer
      format: int64
      x-go-package: code.gitea.io/gitea/modules/structs
    GitTreeResponse:
      description: GitTreeResponse returns a git tree
      type: object
      properties:
        page:
          type: integer
          format: int64
          x-go-name: Page
        sha:
          type: string
          x-go-name: SHA
        total_count:
          type: integer
          format: int64
          x-go-name: TotalCount
        tree:
          type: array
          items:
            $ref: "#/components/schemas/GitEntry"
          x-go-name: Entries
        truncated:
          type: boolean
          x-go-name: Truncated
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    Hook:
      description: Hook a hook is a web hook when one repository changed
      type: object
      properties:
        active:
          type: boolean
          x-go-name: Active
        config:
          type: object
          additionalProperties:
            type: string
          x-go-name: Config
        created_at:
          type: string
          format: date-time
          x-go-name: Created
        events:
          type: array
          items:
            type: string
          x-go-name: Events
        id:
          type: integer
          format: int64
          x-go-name: ID
        type:
          type: string
          x-go-name: Type
        updated_at:
          type: string
          format: date-time
          x-go-name: Updated
      x-go-package: code.gitea.io/gitea/modules/structs
    Identity:
      description: Identity for a person's identity like an author or committer
      type: object
      properties:
        email:
          type: string
          format: email
          x-go-name: Email
        name:
          type: string
          x-go-name: Name
      x-go-package: code.gitea.io/gitea/modules/structs
    InternalTracker:
      description: InternalTracker represents settings for internal tracker
      type: object
      properties:
        allow_only_contributors_to_track_time:
          description: Let only contributors track time (Built-in issue tracker)
          type: boolean
          x-go-name: AllowOnlyContributorsToTrackTime
        enable_issue_dependencies:
          description: Enable dependencies for issues and pull requests (Built-in issue
            tracker)
          type: boolean
          x-go-name: EnableIssueDependencies
        enable_time_tracker:
          description: Enable time tracking (Built-in issue tracker)
          type: boolean
          x-go-name: EnableTimeTracker
      x-go-package: code.gitea.io/gitea/modules/structs
    Issue:
      description: Issue represents an issue in a repository
      type: object
      properties:
        assignee:
          $ref: "#/components/schemas/User"
        assignees:
          type: array
          items:
            $ref: "#/components/schemas/User"
          x-go-name: Assignees
        body:
          type: string
          x-go-name: Body
        closed_at:
          type: string
          format: date-time
          x-go-name: Closed
        comments:
          type: integer
          format: int64
          x-go-name: Comments
        created_at:
          type: string
          format: date-time
          x-go-name: Created
        due_date:
          type: string
          format: date-time
          x-go-name: Deadline
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          type: integer
          format: int64
          x-go-name: ID
        is_locked:
          type: boolean
          x-go-name: IsLocked
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
          x-go-name: Labels
        milestone:
          $ref: "#/components/schemas/Milestone"
        number:
          type: integer
          format: int64
          x-go-name: Index
        original_author:
          type: string
          x-go-name: OriginalAuthor
        original_author_id:
          type: integer
          format: int64
          x-go-name: OriginalAuthorID
        pull_request:
          $ref: "#/components/schemas/PullRequestMeta"
        ref:
          type: string
          x-go-name: Ref
        repository:
          $ref: "#/components/schemas/RepositoryMeta"
        state:
          $ref: "#/components/schemas/StateType"
        title:
          type: string
          x-go-name: Title
        updated_at:
          type: string
          format: date-time
          x-go-name: Updated
        url:
          type: string
          x-go-name: URL
        user:
          $ref: "#/components/schemas/User"
      x-go-package: code.gitea.io/gitea/modules/structs
    IssueDeadline:
      description: IssueDeadline represents an issue deadline
      type: object
      properties:
        due_date:
          type: string
          format: date-time
          x-go-name: Deadline
      x-go-package: code.gitea.io/gitea/modules/structs
    IssueLabelsOption:
      description: IssueLabelsOption a collection of labels
      type: object
      properties:
        labels:
          description: list of label IDs
          type: array
          items:
            type: integer
            format: int64
          x-go-name: Labels
      x-go-package: code.gitea.io/gitea/modules/structs
    IssueTemplate:
      description: IssueTemplate represents an issue template for a repository
      type: object
      properties:
        about:
          type: string
          x-go-name: About
        content:
          type: string
          x-go-name: Content
        file_name:
          type: string
          x-go-name: FileName
        labels:
          type: array
          items:
            type: string
          x-go-name: Labels
        name:
          type: string
          x-go-name: Name
        title:
          type: string
          x-go-name: Title
      x-go-package: code.gitea.io/gitea/modules/structs
    Label:
      description: Label a label to an issue or a pr
      type: object
      properties:
        color:
          type: string
          x-go-name: Color
          example: 00aabb
        description:
          type: string
          x-go-name: Description
        id:
          type: integer
          format: int64
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    MarkdownOption:
      description: MarkdownOption markdown options
      type: object
      properties:
        Context:
          description: |-
            Context to render

            in: body
          type: string
        Mode:
          description: |-
            Mode to render

            in: body
          type: string
        Text:
          description: |-
            Text markdown to render

            in: body
          type: string
        Wiki:
          description: |-
            Is it a wiki page ?

            in: body
          type: boolean
      x-go-package: code.gitea.io/gitea/modules/structs
    MergePullRequestOption:
      description: MergePullRequestForm form for merging Pull Request
      type: object
      required:
        - Do
      properties:
        Do:
          type: string
          enum:
            - merge
            - rebase
            - rebase-merge
            - squash
            - manually-merged
        MergeCommitID:
          type: string
        MergeMessageField:
          type: string
        MergeTitleField:
          type: string
        delete_branch_after_merge:
          type: boolean
          x-go-name: DeleteBranchAfterMerge
        force_merge:
          type: boolean
          x-go-name: ForceMerge
      x-go-name: MergePullRequestForm
      x-go-package: code.gitea.io/gitea/services/forms
    MigrateRepoForm:
      description: |-
        MigrateRepoForm form for migrating repository
        this is used to interact with web ui
      type: object
      required:
        - clone_addr
        - uid
        - repo_name
      properties:
        auth_password:
          type: string
          x-go-name: AuthPassword
        auth_token:
          type: string
          x-go-name: AuthToken
        auth_username:
          type: string
          x-go-name: AuthUsername
        clone_addr:
          type: string
          x-go-name: CloneAddr
        description:
          type: string
          x-go-name: Description
        issues:
          type: boolean
          x-go-name: Issues
        labels:
          type: boolean
          x-go-name: Labels
        lfs:
          type: boolean
          x-go-name: LFS
        lfs_endpoint:
          type: string
          x-go-name: LFSEndpoint
        milestones:
          type: boolean
          x-go-name: Milestones
        mirror:
          type: boolean
          x-go-name: Mirror
        mirror_interval:
          type: string
          x-go-name: MirrorInterval
        private:
          type: boolean
          x-go-name: Private
        pull_requests:
          type: boolean
          x-go-name: PullRequests
        releases:
          type: boolean
          x-go-name: Releases
        repo_name:
          type: string
          x-go-name: RepoName
        service:
          $ref: "#/components/schemas/GitServiceType"
        uid:
          type: integer
          format: int64
          x-go-name: UID
        wiki:
          type: boolean
          x-go-name: Wiki
      x-go-package: code.gitea.io/gitea/services/forms
    MigrateRepoOptions:
      description: |-
        MigrateRepoOptions options for migrating repository's
        this is used to interact with api v1
      type: object
      required:
        - clone_addr
        - repo_name
      properties:
        auth_password:
          type: string
          x-go-name: AuthPassword
        auth_token:
          type: string
          x-go-name: AuthToken
        auth_username:
          type: string
          x-go-name: AuthUsername
        clone_addr:
          type: string
          x-go-name: CloneAddr
        description:
          type: string
          x-go-name: Description
        issues:
          type: boolean
          x-go-name: Issues
        labels:
          type: boolean
          x-go-name: Labels
        lfs:
          type: boolean
          x-go-name: LFS
        lfs_endpoint:
          type: string
          x-go-name: LFSEndpoint
        milestones:
          type: boolean
          x-go-name: Milestones
        mirror:
          type: boolean
          x-go-name: Mirror
        mirror_interval:
          type: string
          x-go-name: MirrorInterval
        private:
          type: boolean
          x-go-name: Private
        pull_requests:
          type: boolean
          x-go-name: PullRequests
        releases:
          type: boolean
          x-go-name: Releases
        repo_name:
          type: string
          x-go-name: RepoName
        repo_owner:
          description: Name of User or Organisation who will own Repo after migration
          type: string
          x-go-name: RepoOwner
        service:
          type: string
          enum:
            - git
            - github
            - gitea
            - gitlab
          x-go-name: Service
        uid:
          description: deprecated (only for backwards compatibility)
          type: integer
          format: int64
          x-go-name: RepoOwnerID
        wiki:
          type: boolean
          x-go-name: Wiki
      x-go-package: code.gitea.io/gitea/modules/structs
    Milestone:
      description: Milestone milestone is a collection of issues on one repository
      type: object
      properties:
        closed_at:
          type: string
          format: date-time
          x-go-name: Closed
        closed_issues:
          type: integer
          format: int64
          x-go-name: ClosedIssues
        created_at:
          type: string
          format: date-time
          x-go-name: Created
        description:
          type: string
          x-go-name: Description
        due_on:
          type: string
          format: date-time
          x-go-name: Deadline
        id:
          type: integer
          format: int64
          x-go-name: ID
        open_issues:
          type: integer
          format: int64
          x-go-name: OpenIssues
        state:
          $ref: "#/components/schemas/StateType"
        title:
          type: string
          x-go-name: Title
        updated_at:
          type: string
          format: date-time
          x-go-name: Updated
      x-go-package: code.gitea.io/gitea/modules/structs
    NotificationCount:
      description: NotificationCount number of unread notifications
      type: object
      properties:
        new:
          type: integer
          format: int64
          x-go-name: New
      x-go-package: code.gitea.io/gitea/modules/structs
    NotificationSubject:
      description: NotificationSubject contains the notification subject (Issue/Pull/Commit)
      type: object
      properties:
        latest_comment_url:
          type: string
          x-go-name: LatestCommentURL
        state:
          $ref: "#/components/schemas/StateType"
        title:
          type: string
          x-go-name: Title
        type:
          $ref: "#/components/schemas/NotifySubjectType"
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    NotificationThread:
      description: NotificationThread expose Notification on API
      type: object
      properties:
        id:
          type: integer
          format: int64
          x-go-name: ID
        pinned:
          type: boolean
          x-go-name: Pinned
        repository:
          $ref: "#/components/schemas/Repository"
        subject:
          $ref: "#/components/schemas/NotificationSubject"
        unread:
          type: boolean
          x-go-name: Unread
        updated_at:
          type: string
          format: date-time
          x-go-name: UpdatedAt
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    NotifySubjectType:
      description: NotifySubjectType represent type of notification subject
      type: string
      x-go-package: code.gitea.io/gitea/modules/structs
    OAuth2Application:
      type: object
      title: OAuth2Application represents an OAuth2 application.
      properties:
        client_id:
          type: string
          x-go-name: ClientID
        client_secret:
          type: string
          x-go-name: ClientSecret
        created:
          type: string
          format: date-time
          x-go-name: Created
        id:
          type: integer
          format: int64
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        redirect_uris:
          type: array
          items:
            type: string
          x-go-name: RedirectURIs
      x-go-package: code.gitea.io/gitea/modules/structs
    Organization:
      description: Organization represents an organization
      type: object
      properties:
        avatar_url:
          type: string
          x-go-name: AvatarURL
        description:
          type: string
          x-go-name: Description
        full_name:
          type: string
          x-go-name: FullName
        id:
          type: integer
          format: int64
          x-go-name: ID
        location:
          type: string
          x-go-name: Location
        repo_admin_change_team_access:
          type: boolean
          x-go-name: RepoAdminChangeTeamAccess
        username:
          type: string
          x-go-name: UserName
        visibility:
          type: string
          x-go-name: Visibility
        website:
          type: string
          x-go-name: Website
      x-go-package: code.gitea.io/gitea/modules/structs
    PRBranchInfo:
      description: PRBranchInfo information about a branch
      type: object
      properties:
        label:
          type: string
          x-go-name: Name
        ref:
          type: string
          x-go-name: Ref
        repo:
          $ref: "#/components/schemas/Repository"
        repo_id:
          type: integer
          format: int64
          x-go-name: RepoID
        sha:
          type: string
          x-go-name: Sha
      x-go-package: code.gitea.io/gitea/modules/structs
    PayloadCommit:
      description: PayloadCommit represents a commit
      type: object
      properties:
        added:
          type: array
          items:
            type: string
          x-go-name: Added
        author:
          $ref: "#/components/schemas/PayloadUser"
        committer:
          $ref: "#/components/schemas/PayloadUser"
        id:
          description: sha1 hash of the commit
          type: string
          x-go-name: ID
        message:
          type: string
          x-go-name: Message
        modified:
          type: array
          items:
            type: string
          x-go-name: Modified
        removed:
          type: array
          items:
            type: string
          x-go-name: Removed
        timestamp:
          type: string
          format: date-time
          x-go-name: Timestamp
        url:
          type: string
          x-go-name: URL
        verification:
          $ref: "#/components/schemas/PayloadCommitVerification"
      x-go-package: code.gitea.io/gitea/modules/structs
    PayloadCommitVerification:
      description: PayloadCommitVerification represents the GPG verification of a commit
      type: object
      properties:
        payload:
          type: string
          x-go-name: Payload
        reason:
          type: string
          x-go-name: Reason
        signature:
          type: string
          x-go-name: Signature
        signer:
          $ref: "#/components/schemas/PayloadUser"
        verified:
          type: boolean
          x-go-name: Verified
      x-go-package: code.gitea.io/gitea/modules/structs
    PayloadUser:
      description: PayloadUser represents the author or committer of a commit
      type: object
      properties:
        email:
          type: string
          format: email
          x-go-name: Email
        name:
          description: Full name of the commit author
          type: string
          x-go-name: Name
        username:
          type: string
          x-go-name: UserName
      x-go-package: code.gitea.io/gitea/modules/structs
    Permission:
      description: Permission represents a set of permissions
      type: object
      properties:
        admin:
          type: boolean
          x-go-name: Admin
        pull:
          type: boolean
          x-go-name: Pull
        push:
          type: boolean
          x-go-name: Push
      x-go-package: code.gitea.io/gitea/modules/structs
    PublicKey:
      description: PublicKey publickey is a user key to push code to repository
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          x-go-name: Created
        fingerprint:
          type: string
          x-go-name: Fingerprint
        id:
          type: integer
          format: int64
          x-go-name: ID
        key:
          type: string
          x-go-name: Key
        key_type:
          type: string
          x-go-name: KeyType
        read_only:
          type: boolean
          x-go-name: ReadOnly
        title:
          type: string
          x-go-name: Title
        url:
          type: string
          x-go-name: URL
        user:
          $ref: "#/components/schemas/User"
      x-go-package: code.gitea.io/gitea/modules/structs
    PullRequest:
      description: PullRequest represents a pull request
      type: object
      properties:
        assignee:
          $ref: "#/components/schemas/User"
        assignees:
          type: array
          items:
            $ref: "#/components/schemas/User"
          x-go-name: Assignees
        base:
          $ref: "#/components/schemas/PRBranchInfo"
        body:
          type: string
          x-go-name: Body
        closed_at:
          type: string
          format: date-time
          x-go-name: Closed
        comments:
          type: integer
          format: int64
          x-go-name: Comments
        created_at:
          type: string
          format: date-time
          x-go-name: Created
        diff_url:
          type: string
          x-go-name: DiffURL
        due_date:
          type: string
          format: date-time
          x-go-name: Deadline
        head:
          $ref: "#/components/schemas/PRBranchInfo"
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          type: integer
          format: int64
          x-go-name: ID
        is_locked:
          type: boolean
          x-go-name: IsLocked
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
          x-go-name: Labels
        merge_base:
          type: string
          x-go-name: MergeBase
        merge_commit_sha:
          type: string
          x-go-name: MergedCommitID
        mergeable:
          type: boolean
          x-go-name: Mergeable
        merged:
          type: boolean
          x-go-name: HasMerged
        merged_at:
          type: string
          format: date-time
          x-go-name: Merged
        merged_by:
          $ref: "#/components/schemas/User"
        milestone:
          $ref: "#/components/schemas/Milestone"
        number:
          type: integer
          format: int64
          x-go-name: Index
        patch_url:
          type: string
          x-go-name: PatchURL
        state:
          $ref: "#/components/schemas/StateType"
        title:
          type: string
          x-go-name: Title
        updated_at:
          type: string
          format: date-time
          x-go-name: Updated
        url:
          type: string
          x-go-name: URL
        user:
          $ref: "#/components/schemas/User"
      x-go-package: code.gitea.io/gitea/modules/structs
    PullRequestMeta:
      description: PullRequestMeta PR info if an issue is a PR
      type: object
      properties:
        merged:
          type: boolean
          x-go-name: HasMerged
        merged_at:
          type: string
          format: date-time
          x-go-name: Merged
      x-go-package: code.gitea.io/gitea/modules/structs
    PullReview:
      description: PullReview represents a pull request review
      type: object
      properties:
        body:
          type: string
          x-go-name: Body
        comments_count:
          type: integer
          format: int64
          x-go-name: CodeCommentsCount
        commit_id:
          type: string
          x-go-name: CommitID
        dismissed:
          type: boolean
          x-go-name: Dismissed
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          type: integer
          format: int64
          x-go-name: ID
        official:
          type: boolean
          x-go-name: Official
        pull_request_url:
          type: string
          x-go-name: HTMLPullURL
        stale:
          type: boolean
          x-go-name: Stale
        state:
          $ref: "#/components/schemas/ReviewStateType"
        submitted_at:
          type: string
          format: date-time
          x-go-name: Submitted
        team:
          $ref: "#/components/schemas/Team"
        user:
          $ref: "#/components/schemas/User"
      x-go-package: code.gitea.io/gitea/modules/structs
    PullReviewComment:
      description: PullReviewComment represents a comment on a pull request review
      type: object
      properties:
        body:
          type: string
          x-go-name: Body
        commit_id:
          type: string
          x-go-name: CommitID
        created_at:
          type: string
          format: date-time
          x-go-name: Created
        diff_hunk:
          type: string
          x-go-name: DiffHunk
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          type: integer
          format: int64
          x-go-name: ID
        original_commit_id:
          type: string
          x-go-name: OrigCommitID
        original_position:
          type: integer
          format: uint64
          x-go-name: OldLineNum
        path:
          type: string
          x-go-name: Path
        position:
          type: integer
          format: uint64
          x-go-name: LineNum
        pull_request_review_id:
          type: integer
          format: int64
          x-go-name: ReviewID
        pull_request_url:
          type: string
          x-go-name: HTMLPullURL
        resolver:
          $ref: "#/components/schemas/User"
        updated_at:
          type: string
          format: date-time
          x-go-name: Updated
        user:
          $ref: "#/components/schemas/User"
      x-go-package: code.gitea.io/gitea/modules/structs
    PullReviewRequestOptions:
      description: PullReviewRequestOptions are options to add or remove pull review
        requests
      type: object
      properties:
        reviewers:
          type: array
          items:
            type: string
          x-go-name: Reviewers
        team_reviewers:
          type: array
          items:
            type: string
          x-go-name: TeamReviewers
      x-go-package: code.gitea.io/gitea/modules/structs
    Reaction:
      description: Reaction contain one reaction
      type: object
      properties:
        content:
          type: string
          x-go-name: Reaction
        created_at:
          type: string
          format: date-time
          x-go-name: Created
        user:
          $ref: "#/components/schemas/User"
      x-go-package: code.gitea.io/gitea/modules/structs
    Reference:
      type: object
      title: Reference represents a Git reference.
      properties:
        object:
          $ref: "#/components/schemas/GitObject"
        ref:
          type: string
          x-go-name: Ref
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    Release:
      description: Release represents a repository release
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: "#/components/schemas/Attachment"
          x-go-name: Attachments
        author:
          $ref: "#/components/schemas/User"
        body:
          type: string
          x-go-name: Note
        created_at:
          type: string
          format: date-time
          x-go-name: CreatedAt
        draft:
          type: boolean
          x-go-name: IsDraft
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          type: integer
          format: int64
          x-go-name: ID
        name:
          type: string
          x-go-name: Title
        prerelease:
          type: boolean
          x-go-name: IsPrerelease
        published_at:
          type: string
          format: date-time
          x-go-name: PublishedAt
        tag_name:
          type: string
          x-go-name: TagName
        tarball_url:
          type: string
          x-go-name: TarURL
        target_commitish:
          type: string
          x-go-name: Target
        url:
          type: string
          x-go-name: URL
        zipball_url:
          type: string
          x-go-name: ZipURL
      x-go-package: code.gitea.io/gitea/modules/structs
    RepoCommit:
      type: object
      title: RepoCommit contains information of a commit in the context of a
        repository.
      properties:
        author:
          $ref: "#/components/schemas/CommitUser"
        committer:
          $ref: "#/components/schemas/CommitUser"
        message:
          type: string
          x-go-name: Message
        tree:
          $ref: "#/components/schemas/CommitMeta"
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
    RepoTopicOptions:
      description: RepoTopicOptions a collection of repo topic names
      type: object
      properties:
        topics:
          description: list of topic names
          type: array
          items:
            type: string
          x-go-name: Topics
      x-go-package: code.gitea.io/gitea/modules/structs
    Repository:
      description: Repository represents a repository
      type: object
      properties:
        allow_merge_commits:
          type: boolean
          x-go-name: AllowMerge
        allow_rebase:
          type: boolean
          x-go-name: AllowRebase
        allow_rebase_explicit:
          type: boolean
          x-go-name: AllowRebaseMerge
        allow_squash_merge:
          type: boolean
          x-go-name: AllowSquash
        archived:
          type: boolean
          x-go-name: Archived
        avatar_url:
          type: string
          x-go-name: AvatarURL
        clone_url:
          type: string
          x-go-name: CloneURL
        created_at:
          type: string
          format: date-time
          x-go-name: Created
        default_branch:
          type: string
          x-go-name: DefaultBranch
        default_merge_style:
          type: string
          x-go-name: DefaultMergeStyle
        description:
          type: string
          x-go-name: Description
        empty:
          type: boolean
          x-go-name: Empty
        external_tracker:
          $ref: "#/components/schemas/ExternalTracker"
        external_wiki:
          $ref: "#/components/schemas/ExternalWiki"
        fork:
          type: boolean
          x-go-name: Fork
        forks_count:
          type: integer
          format: int64
          x-go-name: Forks
        full_name:
          type: string
          x-go-name: FullName
        has_issues:
          type: boolean
          x-go-name: HasIssues
        has_projects:
          type: boolean
          x-go-name: HasProjects
        has_pull_requests:
          type: boolean
          x-go-name: HasPullRequests
        has_wiki:
          type: boolean
          x-go-name: HasWiki
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          type: integer
          format: int64
          x-go-name: ID
        ignore_whitespace_conflicts:
          type: boolean
          x-go-name: IgnoreWhitespaceConflicts
        internal:
          type: boolean
          x-go-name: Internal
        internal_tracker:
          $ref: "#/components/schemas/InternalTracker"
        mirror:
          type: boolean
          x-go-name: Mirror
        mirror_interval:
          type: string
          x-go-name: MirrorInterval
        name:
          type: string
          x-go-name: Name
        open_issues_count:
          type: integer
          format: int64
          x-go-name: OpenIssues
        open_pr_counter:
          type: integer
          format: int64
          x-go-name: OpenPulls
        original_url:
          type: string
          x-go-name: OriginalURL
        owner:
          $ref: "#/components/schemas/User"
        parent:
          $ref: "#/components/schemas/Repository"
        permissions:
          $ref: "#/components/schemas/Permission"
        private:
          type: boolean
          x-go-name: Private
        release_counter:
          type: integer
          format: int64
          x-go-name: Releases
        size:
          type: integer
          format: int64
          x-go-name: Size
        ssh_url:
          type: string
          x-go-name: SSHURL
        stars_count:
          type: integer
          format: int64
          x-go-name: Stars
        template:
          type: boolean
          x-go-name: Template
        updated_at:
          type: string
          format: date-time
          x-go-name: Updated
        watchers_count:
          type: integer
          format: int64
          x-go-name: Watchers
        website:
          type: string
          x-go-name: Website
      x-go-package: code.gitea.io/gitea/modules/structs
    RepositoryMeta:
      description: RepositoryMeta basic repository information
      type: object
      properties:
        full_name:
          type: string
          x-go-name: FullName
        id:
          type: integer
          format: int64
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        owner:
          type: string
          x-go-name: Owner
      x-go-package: code.gitea.io/gitea/modules/structs
    ReviewStateType:
      description: ReviewStateType review state type
      type: string
      x-go-package: code.gitea.io/gitea/modules/structs
    SearchResults:
      description: SearchResults results of a successful search
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Repository"
          x-go-name: Data
        ok:
          type: boolean
          x-go-name: OK
      x-go-package: code.gitea.io/gitea/modules/structs
    ServerVersion:
      description: ServerVersion wraps the version of the server
      type: object
      properties:
        version:
          type: string
          x-go-name: Version
      x-go-package: code.gitea.io/gitea/modules/structs
    StateType:
      description: StateType issue state type
      type: string
      x-go-package: code.gitea.io/gitea/modules/structs
    StopWatch:
      description: StopWatch represent a running stopwatch
      type: object
      properties:
        created:
          type: string
          format: date-time
          x-go-name: Created
        duration:
          type: string
          x-go-name: Duration
        issue_index:
          type: integer
          format: int64
          x-go-name: IssueIndex
        issue_title:
          type: string
          x-go-name: IssueTitle
        repo_name:
          type: string
          x-go-name: RepoName
        repo_owner_name:
          type: string
          x-go-name: RepoOwnerName
        seconds:
          type: integer
          format: int64
          x-go-name: Seconds
      x-go-package: code.gitea.io/gitea/modules/structs
    SubmitPullReviewOptions:
      description: SubmitPullReviewOptions are options to submit a pending pull review
      type: object
      properties:
        body:
          type: string
          x-go-name: Body
        event:
          $ref: "#/components/schemas/ReviewStateType"
      x-go-package: code.gitea.io/gitea/modules/structs
    Tag:
      description: Tag represents a repository tag
      type: object
      properties:
        commit:
          $ref: "#/components/schemas/CommitMeta"
        id:
          type: string
          x-go-name: ID
        message:
          type: string
          x-go-name: Message
        name:
          type: string
          x-go-name: Name
        tarball_url:
          type: string
          x-go-name: TarballURL
        zipball_url:
          type: string
          x-go-name: ZipballURL
      x-go-package: code.gitea.io/gitea/modules/structs
    Team:
      description: Team represents a team in an organization
      type: object
      properties:
        can_create_org_repo:
          type: boolean
          x-go-name: CanCreateOrgRepo
        description:
          type: string
          x-go-name: Description
        id:
          type: integer
          format: int64
          x-go-name: ID
        includes_all_repositories:
          type: boolean
          x-go-name: IncludesAllRepositories
        name:
          type: string
          x-go-name: Name
        organization:
          $ref: "#/components/schemas/Organization"
        permission:
          type: string
          enum:
            - none
            - read
            - write
            - admin
            - owner
          x-go-name: Permission
        units:
          type: array
          items:
            type: string
          x-go-name: Units
          example:
            - repo.code
            - repo.issues
            - repo.ext_issues
            - repo.wiki
            - repo.pulls
            - repo.releases
            - repo.projects
            - repo.ext_wiki
      x-go-package: code.gitea.io/gitea/modules/structs
    TimeStamp:
      description: TimeStamp defines a timestamp
      type: integer
      format: int64
      x-go-package: code.gitea.io/gitea/modules/timeutil
    TopicName:
      description: TopicName a list of repo topic names
      type: object
      properties:
        topics:
          type: array
          items:
            type: string
          x-go-name: TopicNames
      x-go-package: code.gitea.io/gitea/modules/structs
    TopicResponse:
      description: TopicResponse for returning topics
      type: object
      properties:
        created:
          type: string
          format: date-time
          x-go-name: Created
        id:
          type: integer
          format: int64
          x-go-name: ID
        repo_count:
          type: integer
          format: int64
          x-go-name: RepoCount
        topic_name:
          type: string
          x-go-name: Name
        updated:
          type: string
          format: date-time
          x-go-name: Updated
      x-go-package: code.gitea.io/gitea/modules/structs
    TrackedTime:
      description: TrackedTime worked time for an issue / pr
      type: object
      properties:
        created:
          type: string
          format: date-time
          x-go-name: Created
        id:
          type: integer
          format: int64
          x-go-name: ID
        issue:
          $ref: "#/components/schemas/Issue"
        issue_id:
          description: deprecated (only for backwards compatibility)
          type: integer
          format: int64
          x-go-name: IssueID
        time:
          description: Time in seconds
          type: integer
          format: int64
          x-go-name: Time
        user_id:
          description: deprecated (only for backwards compatibility)
          type: integer
          format: int64
          x-go-name: UserID
        user_name:
          type: string
          x-go-name: UserName
      x-go-package: code.gitea.io/gitea/modules/structs
    TransferRepoOption:
      description: TransferRepoOption options when transfer a repository's ownership
      type: object
      required:
        - new_owner
      properties:
        new_owner:
          type: string
          x-go-name: NewOwner
        team_ids:
          description: ID of the team or teams to add to the repository. Teams can only be
            added to organization-owned repositories.
          type: array
          items:
            type: integer
            format: int64
          x-go-name: TeamIDs
      x-go-package: code.gitea.io/gitea/modules/structs
    UpdateFileOptions:
      description: >-
        UpdateFileOptions options for updating files

        Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
      type: object
      required:
        - sha
        - content
      properties:
        author:
          $ref: "#/components/schemas/Identity"
        branch:
          description: branch (optional) to base this file from. if not given, the default
            branch is used
          type: string
          x-go-name: BranchName
        committer:
          $ref: "#/components/schemas/Identity"
        content:
          description: content must be base64 encoded
          type: string
          x-go-name: Content
        dates:
          $ref: "#/components/schemas/CommitDateOptions"
        from_path:
          description: from_path (optional) is the path of the original file which will be
            moved/renamed to the path in the URL
          type: string
          x-go-name: FromPath
        message:
          description: message (optional) for the commit of this file. if not supplied, a
            default message will be used
          type: string
          x-go-name: Message
        new_branch:
          description: new_branch (optional) will make a new branch from `branch` before
            creating the file
          type: string
          x-go-name: NewBranchName
        sha:
          description: sha is the SHA for the file that already exists
          type: string
          x-go-name: SHA
        signoff:
          description: Add a Signed-off-by trailer by the committer at the end of the
            commit log message.
          type: boolean
          x-go-name: Signoff
      x-go-package: code.gitea.io/gitea/modules/structs
    User:
      description: User represents a user
      type: object
      properties:
        active:
          description: Is user active
          type: boolean
          x-go-name: IsActive
        avatar_url:
          description: URL to the user's avatar
          type: string
          x-go-name: AvatarURL
        created:
          type: string
          format: date-time
          x-go-name: Created
        description:
          description: the user's description
          type: string
          x-go-name: Description
        email:
          type: string
          format: email
          x-go-name: Email
        followers_count:
          description: user counts
          type: integer
          format: int64
          x-go-name: Followers
        following_count:
          type: integer
          format: int64
          x-go-name: Following
        full_name:
          description: the user's full name
          type: string
          x-go-name: FullName
        id:
          description: the user's id
          type: integer
          format: int64
          x-go-name: ID
        is_admin:
          description: Is the user an administrator
          type: boolean
          x-go-name: IsAdmin
        language:
          description: User locale
          type: string
          x-go-name: Language
        last_login:
          type: string
          format: date-time
          x-go-name: LastLogin
        location:
          description: the user's location
          type: string
          x-go-name: Location
        login:
          description: the user's username
          type: string
          x-go-name: UserName
        prohibit_login:
          description: Is user login prohibited
          type: boolean
          x-go-name: ProhibitLogin
        restricted:
          description: Is user restricted
          type: boolean
          x-go-name: Restricted
        starred_repos_count:
          type: integer
          format: int64
          x-go-name: StarredRepos
        visibility:
          description: "User visibility level option: public, limited, private"
          type: string
          x-go-name: Visibility
        website:
          description: the user's website
          type: string
          x-go-name: Website
      x-go-package: code.gitea.io/gitea/modules/structs
    UserHeatmapData:
      description: UserHeatmapData represents the data needed to create a heatmap
      type: object
      properties:
        contributions:
          type: integer
          format: int64
          x-go-name: Contributions
        timestamp:
          $ref: "#/components/schemas/TimeStamp"
      x-go-package: code.gitea.io/gitea/models
    UserSettings:
      description: UserSettings represents user settings
      type: object
      properties:
        description:
          type: string
          x-go-name: Description
        diff_view_style:
          type: string
          x-go-name: DiffViewStyle
        full_name:
          type: string
          x-go-name: FullName
        hide_activity:
          type: boolean
          x-go-name: HideActivity
        hide_email:
          description: Privacy
          type: boolean
          x-go-name: HideEmail
        language:
          type: string
          x-go-name: Language
        location:
          type: string
          x-go-name: Location
        theme:
          type: string
          x-go-name: Theme
        website:
          type: string
          x-go-name: Website
      x-go-package: code.gitea.io/gitea/modules/structs
    UserSettingsOptions:
      description: UserSettingsOptions represents options to change user settings
      type: object
      properties:
        description:
          type: string
          x-go-name: Description
        diff_view_style:
          type: string
          x-go-name: DiffViewStyle
        full_name:
          type: string
          x-go-name: FullName
        hide_activity:
          type: boolean
          x-go-name: HideActivity
        hide_email:
          description: Privacy
          type: boolean
          x-go-name: HideEmail
        language:
          type: string
          x-go-name: Language
        location:
          type: string
          x-go-name: Location
        theme:
          type: string
          x-go-name: Theme
        website:
          type: string
          x-go-name: Website
      x-go-package: code.gitea.io/gitea/modules/structs
    WatchInfo:
      description: WatchInfo represents an API watch status of one repository
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          x-go-name: CreatedAt
        ignored:
          type: boolean
          x-go-name: Ignored
        reason:
          type: object
          x-go-name: Reason
        repository_url:
          type: string
          x-go-name: RepositoryURL
        subscribed:
          type: boolean
          x-go-name: Subscribed
        url:
          type: string
          x-go-name: URL
      x-go-package: code.gitea.io/gitea/modules/structs
